// Angiography Report Field Component
// Specialized text field for angiography and imaging reports
// Medical-grade formatting with template assistance

import React, { useState, useCallback, useEffect } from 'react';
import { 
  FileText, 
  Heart, 
  Eye, 
  Copy, 
  Check,
  Wand2,
  RotateCcw,
  AlertTriangle,
  Info
} from 'lucide-react';
import { Button } from '../ui/button';
import { cn } from '../../lib/utils';
import { AngiographyReportFieldProps } from '../../types/form100';
import '../Form100/styles/mobile.css';

// Angiography report templates for quick insertion
const ANGIOGRAPHY_TEMPLATES = {
  normal: {
    title: 'Normal Coronary Angiography',
    content: `CORONARY ANGIOGRAPHY REPORT

PROCEDURE: Coronary angiography via right femoral approach

FINDINGS:
- Left Main: Normal, no significant stenosis
- LAD: Normal caliber, no significant stenosis
- LCx: Normal caliber, no significant stenosis  
- RCA: Dominant vessel, normal caliber, no significant stenosis

CONCLUSION:
Normal coronary arteries. No significant coronary artery disease.

RECOMMENDATIONS:
Continue optimal medical therapy for cardiovascular risk factors.`
  },
  stenosis: {
    title: 'Coronary Stenosis Template',
    content: `CORONARY ANGIOGRAPHY REPORT

PROCEDURE: Coronary angiography via [approach]

FINDINGS:
- Left Main: [findings]
- LAD: [% stenosis] stenosis in [location]
- LCx: [findings]
- RCA: [findings]

VENTRICULAR FUNCTION:
- LVEF: [%]
- Wall motion: [normal/abnormal]

CONCLUSION:
[Significant/non-significant] coronary artery disease

RECOMMENDATIONS:
[PCI/CABG/medical therapy] recommended`
  },
  acute: {
    title: 'Acute MI Angiography',
    content: `EMERGENCY CORONARY ANGIOGRAPHY

INDICATION: ST-elevation myocardial infarction

PROCEDURE: Emergency coronary angiography and PCI

CULPRIT VESSEL: [vessel]
STENOSIS: [%] stenosis/occlusion

INTERVENTION:
- Thrombectomy: [yes/no]
- Stent deployment: [type, size]
- TIMI flow post-PCI: [grade]

DOOR-TO-BALLOON TIME: [minutes]

CONCLUSION:
Successful primary PCI to [vessel]`
  }
};

// Formatting shortcuts for medical documentation
const FORMATTING_SHORTCUTS = [
  { key: 'Ctrl+B', label: 'Bold', format: (text: string) => `**${text}**` },
  { key: 'Ctrl+I', label: 'Italic', format: (text: string) => `*${text}*` },
  { key: 'Ctrl+U', label: 'Underline', format: (text: string) => `__${text}__` }
];

const AngiographyReportField: React.FC<AngiographyReportFieldProps> = ({
  value = '',
  onChange,
  placeholder = "Enter angiography report details...",
  disabled = false,
  className,
  maxLength = 10000,
  showFormatting = true
}) => {
  // Component state
  const [showTemplates, setShowTemplates] = useState(false);
  const [copied, setCopied] = useState(false);
  const [selectedText, setSelectedText] = useState('');
  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);
  const [isFocused, setIsFocused] = useState(false);

  // Mobile keyboard detection
  useEffect(() => {
    const handleResize = () => {
      if (window.innerHeight < 600 && window.screen.height > 600) {
        setIsKeyboardVisible(true);
      } else {
        setIsKeyboardVisible(false);
      }
    };

    const handleFocusIn = () => {
      setTimeout(() => {
        handleResize();
      }, 300);
    };

    const handleFocusOut = () => {
      setTimeout(() => {
        setIsKeyboardVisible(false);
        setIsFocused(false);
      }, 300);
    };

    window.addEventListener('resize', handleResize);
    window.addEventListener('focusin', handleFocusIn);
    window.addEventListener('focusout', handleFocusOut);

    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('focusin', handleFocusIn);
      window.removeEventListener('focusout', handleFocusOut);
    };
  }, []);

  // Handle template insertion
  const handleTemplateInsert = useCallback((template: typeof ANGIOGRAPHY_TEMPLATES[keyof typeof ANGIOGRAPHY_TEMPLATES]) => {
    const newValue = value ? `${value}\n\n${template.content}` : template.content;
    if (newValue.length <= maxLength) {
      onChange(newValue);
    }
    setShowTemplates(false);
  }, [value, onChange, maxLength]);

  // Handle text selection for formatting
  const handleTextSelect = useCallback((e: React.SyntheticEvent<HTMLTextAreaElement>) => {
    const target = e.target as HTMLTextAreaElement;
    const start = target.selectionStart;
    const end = target.selectionEnd;
    setSelectedText(target.value.substring(start, end));
  }, []);

  // Apply formatting to selected text
  const applyFormatting = useCallback((formatFunction: (text: string) => string) => {
    if (!selectedText) return;
    
    const newValue = value.replace(selectedText, formatFunction(selectedText));
    if (newValue.length <= maxLength) {
      onChange(newValue);
    }
  }, [selectedText, value, onChange, maxLength]);

  // Copy report to clipboard
  const handleCopy = useCallback(async () => {
    if (value) {
      try {
        await navigator.clipboard.writeText(value);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (err) {
        console.error('Failed to copy report:', err);
      }
    }
  }, [value]);

  // Clear report
  const handleClear = useCallback(() => {
    onChange('');
  }, [onChange]);

  // Handle keyboard shortcuts
  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.ctrlKey || e.metaKey) {
      switch (e.key.toLowerCase()) {
        case 'b':
          e.preventDefault();
          applyFormatting((text) => `**${text}**`);
          break;
        case 'i':
          e.preventDefault();
          applyFormatting((text) => `*${text}*`);
          break;
        case 'u':
          e.preventDefault();
          applyFormatting((text) => `__${text}__`);
          break;
      }
    }
  }, [applyFormatting]);

  // Calculate word count and estimated reading time
  const wordCount = value.trim().split(/\s+/).filter(Boolean).length;
  const readingTime = Math.ceil(wordCount / 200); // Average reading speed

  return (
    <div className={cn(
      "space-y-3 form100-keyboard-aware",
      isKeyboardVisible && "form100-keyboard-visible",
      className
    )}>
      {/* Header with controls */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-0">
        <div className="flex items-center space-x-2">
          <Heart className="w-4 h-4 text-red-500" />
          <label className="text-sm font-medium text-gray-700">
            Angiography Report
          </label>
          <div className="text-xs text-gray-500 hidden sm:block">
            {wordCount} words â€¢ {readingTime}min read
          </div>
        </div>
        
        <div className="flex items-center space-x-2 w-full sm:w-auto justify-center sm:justify-end">
          {/* Template dropdown */}
          <div className="relative">
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setShowTemplates(!showTemplates)}
              disabled={disabled}
              className="form100-button h-11 sm:h-8 px-4 sm:px-3 text-base sm:text-sm touch-manipulation"
            >
              <Wand2 className="w-3 h-3 mr-1" />
              Templates
            </Button>
            
            {showTemplates && (
              <div className="absolute right-0 mt-2 w-72 sm:w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                <div className="p-3 sm:p-2">
                  <h4 className="text-base sm:text-sm font-medium text-gray-900 mb-3 sm:mb-2">
                    Angiography Templates
                  </h4>
                  {Object.entries(ANGIOGRAPHY_TEMPLATES).map(([key, template]) => (
                    <button
                      key={key}
                      onClick={() => handleTemplateInsert(template)}
                      className="form100-dropdown-option w-full text-left p-3 sm:p-2 text-base sm:text-sm hover:bg-gray-50 rounded touch-manipulation"
                    >
                      <div className="font-medium text-gray-900">{template.title}</div>
                      <div className="text-xs text-gray-500 truncate">
                        {template.content.substring(0, 50)}...
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Action buttons */}
          {value && (
            <>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={handleCopy}
                className="form100-button h-11 sm:h-8 px-4 sm:px-3 text-base sm:text-sm touch-manipulation"
              >
                {copied ? (
                  <Check className="w-3 h-3 text-green-600" />
                ) : (
                  <Copy className="w-3 h-3" />
                )}
              </Button>
              
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={handleClear}
                className="form100-button h-11 sm:h-8 px-4 sm:px-3 text-base sm:text-sm text-gray-500 hover:text-red-600 touch-manipulation"
              >
                <RotateCcw className="w-3 h-3" />
              </Button>
            </>
          )}
        </div>
      </div>

      {/* Formatting toolbar */}
      {showFormatting && selectedText && !isKeyboardVisible && (
        <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 p-3 sm:p-2 bg-gray-50 border border-gray-200 rounded-lg">
          <span className="text-sm sm:text-xs text-gray-600">Format selected text:</span>
          <div className="flex items-center space-x-2 w-full sm:w-auto">
            {FORMATTING_SHORTCUTS.map((shortcut) => (
              <Button
                key={shortcut.key}
                type="button"
                variant="outline"
                size="sm"
                onClick={() => applyFormatting(shortcut.format)}
                className="form100-button-small h-9 sm:h-7 px-3 sm:px-2 text-sm sm:text-xs touch-manipulation"
                title={`${shortcut.label} (${shortcut.key})`}
              >
                {shortcut.label}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Main text area */}
      <div className="relative">
        <textarea
          value={value}
          onChange={(e) => {
            if (e.target.value.length <= maxLength) {
              onChange(e.target.value);
            }
          }}
          onSelect={handleTextSelect}
          onKeyDown={handleKeyDown}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          placeholder={placeholder}
          disabled={disabled}
          maxLength={maxLength}
          className={cn(
            "form100-angiography-textarea w-full min-h-[220px] sm:min-h-[200px] p-4 border border-gray-300 rounded-lg resize-none sm:resize-y font-mono text-base sm:text-sm",
            "focus:ring-2 focus:ring-blue-500 focus:border-transparent form100-focus-ring",
            "transition-all duration-200 touch-manipulation form100-no-zoom",
            "placeholder-gray-400 text-gray-900",
            disabled && "bg-gray-50 text-gray-500 cursor-not-allowed"
          )}
          rows={8}
        />
        
        {/* Character count */}
        <div className="absolute bottom-2 right-2 text-xs text-gray-400">
          {value.length}/{maxLength}
        </div>

        {/* Medical icon overlay */}
        {!value && (
          <div className="absolute top-4 right-4 opacity-20">
            <Heart className="w-8 h-8 text-red-500" />
          </div>
        )}
      </div>

      {/* Help text and shortcuts */}
      {!isKeyboardVisible && (
        <div className="hidden sm:flex items-start justify-between text-xs text-gray-500">
        <div className="flex items-start space-x-4">
          <div>
            <div className="flex items-center space-x-1 mb-1">
              <Info className="w-3 h-3" />
              <span className="font-medium">Formatting shortcuts:</span>
            </div>
            <div className="space-y-1">
              {FORMATTING_SHORTCUTS.map((shortcut) => (
                <div key={shortcut.key}>
                  <kbd className="px-1 py-0.5 bg-gray-100 rounded text-xs font-mono">
                    {shortcut.key}
                  </kbd>
                  <span className="ml-1">{shortcut.label}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div>
            <div className="flex items-center space-x-1 mb-1">
              <AlertTriangle className="w-3 h-3" />
              <span className="font-medium">Medical standards:</span>
            </div>
            <ul className="space-y-1">
              <li>â€¢ Use TIMI flow grading (0-3)</li>
              <li>â€¢ Specify vessel percentages</li>
              <li>â€¢ Include door-to-balloon times</li>
              <li>â€¢ Document LVEF when available</li>
            </ul>
          </div>
        </div>
        </div>
      )}

      {/* Template overlay */}
      {showTemplates && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-20 z-[5]"
          onClick={() => setShowTemplates(false)}
        />
      )}
    </div>
  );
};

export default AngiographyReportField;