import React, { useState, useEffect, useRef } from 'react';
import {
  Brain,
  Sparkles,
  Send,
  AlertCircle,
  X,
  Plus,
  BarChart3,
  FileText,
  Activity,
  Stethoscope,
  TrendingUp,
  Search,
  Filter,
  Grid3X3,
  List,
  ChevronDown,
  ChevronUp,
  Zap
} from 'lucide-react';
import { MedicalButton } from '../../ui/MedicalDesignSystem';

// Import new components
import { MedicalAnalysisCard } from './MedicalAnalysisCard';
import { QuickActionTemplates } from './QuickActionTemplates';
import { AnalysisResults } from './AnalysisResults';

interface ProcessingHistory {
  userInstruction: string;
  aiResponse: string;
  model: string;
  tokensUsed?: number;
  processingTime: number;
  timestamp: number;
}

interface AIProcessingContentProps {
  transcript: string;
  hasTranscript: boolean;
  processing: boolean;
  aiError?: string | null;
  processingHistory?: ProcessingHistory[];
  onProcessText?: (instruction: string) => void;
  onClearAIError?: () => void;
  onClearHistory?: () => void;
}

type ViewMode = 'templates' | 'history' | 'results';
type LayoutMode = 'grid' | 'list';

export const AIProcessingContent: React.FC<AIProcessingContentProps> = ({
  transcript,
  hasTranscript,
  processing,
  aiError,
  processingHistory = [],
  onProcessText,
  onClearAIError,
  onClearHistory
}) => {
  const [viewMode, setViewMode] = useState<ViewMode>('templates');
  const [layoutMode, setLayoutMode] = useState<LayoutMode>('grid');
  const [customInstruction, setCustomInstruction] = useState('');
  const [showCustomInput, setShowCustomInput] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'newest' | 'oldest' | 'processing-time'>('newest');

  // Auto-switch to results view when we have enough history
  useEffect(() => {
    if (processingHistory.length >= 3 && viewMode === 'templates') {
      setViewMode('history');
    }
  }, [processingHistory.length, viewMode]);

  const handleCustomSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (customInstruction.trim() && onProcessText) {
      onProcessText(customInstruction.trim());
      setCustomInstruction('');
      setShowCustomInput(false);
    }
  };

  const handleTemplateSelect = (instruction: string) => {
    if (onProcessText) {
      onProcessText(instruction);
    }
  };

  // Filter and sort history
  const filteredHistory = processingHistory
    .filter(item => {
      if (!searchQuery) return true;
      return (
        item.userInstruction.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.aiResponse.toLowerCase().includes(searchQuery.toLowerCase())
      );
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return b.timestamp - a.timestamp;
        case 'oldest':
          return a.timestamp - b.timestamp;
        case 'processing-time':
          return b.processingTime - a.processingTime;
        default:
          return b.timestamp - a.timestamp;
      }
    });

  const exportAllAnalyses = () => {
    if (processingHistory.length === 0) return;

    const content = `Medical AI Analysis Report - Complete History
Generated: ${new Date().toLocaleString()}
Total Analyses: ${processingHistory.length}

${processingHistory.map((analysis, index) => `
ANALYSIS #${index + 1}
Date: ${new Date(analysis.timestamp).toLocaleString()}
Model: ${analysis.model}
Processing Time: ${analysis.processingTime < 1000 ? `${analysis.processingTime}ms` : `${(analysis.processingTime / 1000).toFixed(1)}s`}
${analysis.tokensUsed ? `Tokens Used: ${analysis.tokensUsed}` : ''}

REQUEST:
${analysis.userInstruction}

AI RESPONSE:
${analysis.aiResponse}

${'='.repeat(80)}
`).join('')}

Generated by MediMind Expert AI Processing System
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `medical-analyses-complete-${new Date().toISOString().slice(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="flex flex-col h-full max-h-full bg-gradient-to-br from-slate-50/80 via-white/90 to-blue-50/60 dark:from-slate-900/80 dark:via-slate-800/90 dark:to-blue-950/60">
      
      {/* Modern Header */}
      <div className="flex-shrink-0 bg-white/80 dark:bg-slate-800/80 backdrop-blur-xl border-b border-slate-200/50 dark:border-slate-700/50">
        <div className="px-6 py-4">
          {/* Top Row - Title and Action Button */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl p-2.5 shadow-lg">
                <Brain className="w-6 h-6 text-white" />
              </div>
              <div>
                <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">
                  AI Medical Analysis
                </h2>
                <p className="text-sm text-slate-600 dark:text-slate-400">
                  Professional clinical intelligence and insights
                </p>
              </div>
            </div>

            {/* Quick Custom Analysis Button */}
            {hasTranscript && (
              <MedicalButton
                variant={showCustomInput ? "outline" : "primary"}
                size="lg"
                leftIcon={showCustomInput ? X : Plus}
                onClick={() => setShowCustomInput(!showCustomInput)}
                disabled={processing}
                className="min-w-[140px] shadow-lg"
              >
                {showCustomInput ? 'Cancel' : 'Custom Analysis'}
              </MedicalButton>
            )}
          </div>

          {/* Custom Input Form - Collapsible */}
          {showCustomInput && (
            <div className="mb-4 p-4 bg-gradient-to-r from-blue-50/80 to-indigo-50/80 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl border border-blue-200/50 dark:border-blue-700/50">
              <form onSubmit={handleCustomSubmit} className="flex gap-3">
                <div className="flex-1">
                  <textarea
                    value={customInstruction}
                    onChange={(e) => setCustomInstruction(e.target.value)}
                    placeholder="Enter your specific medical analysis instructions..."
                    disabled={processing}
                    rows={2}
                    className="w-full resize-none rounded-xl border border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm px-4 py-3 text-sm text-slate-800 dark:text-slate-200 placeholder-slate-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:opacity-50 transition-all"
                    maxLength={500}
                  />
                  <div className="flex justify-between items-center mt-2">
                    <span className="text-xs text-slate-500 dark:text-slate-500">
                      {customInstruction.length}/500 characters
                    </span>
                  </div>
                </div>
                <MedicalButton
                  type="submit"
                  variant="primary"
                  size="lg"
                  rightIcon={processing ? Sparkles : Send}
                  disabled={processing || !customInstruction.trim()}
                  loading={processing}
                  className="min-w-[120px] h-fit"
                >
                  {processing ? 'Processing...' : 'Analyze'}
                </MedicalButton>
              </form>
            </div>
          )}

          {/* Navigation Tabs */}
          <div className="flex items-center justify-between">
            <div className="flex bg-slate-100 dark:bg-slate-800 rounded-xl p-1.5 shadow-inner">
              <button
                onClick={() => setViewMode('templates')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                  viewMode === 'templates'
                    ? 'bg-white dark:bg-slate-700 text-blue-600 dark:text-blue-400 shadow-sm'
                    : 'text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-200'
                }`}
              >
                <Stethoscope className="w-4 h-4" />
                <span>Templates</span>
              </button>
              <button
                onClick={() => setViewMode('history')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                  viewMode === 'history'
                    ? 'bg-white dark:bg-slate-700 text-blue-600 dark:text-blue-400 shadow-sm'
                    : 'text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-200'
                }`}
              >
                <FileText className="w-4 h-4" />
                <span>History ({processingHistory.length})</span>
              </button>
              <button
                onClick={() => setViewMode('results')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                  viewMode === 'results'
                    ? 'bg-white dark:bg-slate-700 text-blue-600 dark:text-blue-400 shadow-sm'
                    : 'text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-200'
                }`}
              >
                <BarChart3 className="w-4 h-4" />
                <span>Insights</span>
              </button>
            </div>

            {/* History View Controls */}
            {viewMode === 'history' && processingHistory.length > 0 && (
              <div className="flex items-center space-x-3">
                <div className="flex bg-slate-100 dark:bg-slate-800 rounded-lg p-1">
                  <button
                    onClick={() => setLayoutMode('grid')}
                    className={`p-2 rounded-md transition-all ${
                      layoutMode === 'grid'
                        ? 'bg-white dark:bg-slate-700 text-blue-600 dark:text-blue-400 shadow-sm'
                        : 'text-slate-500 dark:text-slate-500 hover:text-slate-700 dark:hover:text-slate-300'
                    }`}
                  >
                    <Grid3X3 className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setLayoutMode('list')}
                    className={`p-2 rounded-md transition-all ${
                      layoutMode === 'list'
                        ? 'bg-white dark:bg-slate-700 text-blue-600 dark:text-blue-400 shadow-sm'
                        : 'text-slate-500 dark:text-slate-500 hover:text-slate-700 dark:hover:text-slate-300'
                    }`}
                  >
                    <List className="w-4 h-4" />
                  </button>
                </div>

                <div className="flex items-center space-x-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
                    <input
                      type="text"
                      placeholder="Search analyses..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-48 pl-10 pr-4 py-2 text-sm border border-slate-200 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>

                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value as any)}
                    className="px-3 py-2 text-sm border border-slate-200 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                    <option value="processing-time">Processing Time</option>
                  </select>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* AI Error Display */}
      {aiError && (
        <div className="flex-shrink-0 mx-6 mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-xl">
          <div className="flex items-start space-x-3">
            <AlertCircle className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <div className="flex items-center justify-between">
                <h4 className="text-sm font-semibold text-red-800 dark:text-red-200">
                  AI Processing Error
                </h4>
                {onClearAIError && (
                  <MedicalButton
                    onClick={onClearAIError}
                    variant="ghost"
                    size="icon"
                    className="text-red-600 hover:text-red-700"
                  >
                    <X className="w-4 h-4" />
                  </MedicalButton>
                )}
              </div>
              <p className="text-sm text-red-700 dark:text-red-300 mt-1">{aiError}</p>
            </div>
          </div>
        </div>
      )}

      {/* Main Content Area */}
      <div className="flex-1 min-h-0 overflow-hidden">
        <div className="h-full overflow-y-auto px-4 py-4 pb-32 md:px-6 md:py-6 md:pb-32">
          
          {/* Templates View */}
          {viewMode === 'templates' && (
            <QuickActionTemplates
              onSelectTemplate={handleTemplateSelect}
              disabled={processing}
              hasTranscript={hasTranscript}
            />
          )}

          {/* History View */}
          {viewMode === 'history' && (
            <>
              {filteredHistory.length > 0 ? (
                <div className={`${layoutMode === 'grid' ? 'space-y-4 md:space-y-6' : 'space-y-3 md:space-y-4'} max-w-full`}>
                  {filteredHistory.map((analysis, index) => (
                    <MedicalAnalysisCard
                      key={`analysis-${analysis.timestamp}-${index}`}
                      analysis={analysis}
                      index={index}
                      totalCount={processingHistory.length}
                    />
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center py-16 text-center">
                  <div className="w-20 h-20 bg-gradient-to-br from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-800 rounded-3xl flex items-center justify-center mb-6">
                    <FileText className="w-10 h-10 text-slate-400" />
                  </div>
                  <h3 className="text-xl font-bold text-slate-600 dark:text-slate-400 mb-3">
                    {searchQuery ? 'No matching analyses found' : 'No analysis history yet'}
                  </h3>
                  <p className="text-slate-500 dark:text-slate-500 max-w-md">
                    {searchQuery 
                      ? 'Try adjusting your search terms or filters.'
                      : hasTranscript 
                        ? 'Start by selecting a medical analysis template or create a custom analysis.'
                        : 'Record or upload a medical transcript to begin AI analysis.'
                    }
                  </p>
                  {searchQuery && (
                    <MedicalButton
                      variant="outline"
                      size="md"
                      onClick={() => setSearchQuery('')}
                      className="mt-4"
                    >
                      Clear Search
                    </MedicalButton>
                  )}
                </div>
              )}
            </>
          )}

          {/* Results View */}
          {viewMode === 'results' && (
            <AnalysisResults
              processingHistory={processingHistory}
              onExportAll={exportAllAnalyses}
              onClearAll={onClearHistory}
            />
          )}
        </div>
      </div>

      {/* Processing Indicator */}
      {processing && (
        <div className="fixed bottom-6 right-6 z-50">
          <div className="flex items-center space-x-3 bg-blue-600 text-white px-4 py-3 rounded-xl shadow-2xl">
            <div className="animate-spin">
              <Zap className="w-5 h-5" />
            </div>
            <span className="font-medium">Processing analysis...</span>
          </div>
        </div>
      )}
    </div>
  );
};