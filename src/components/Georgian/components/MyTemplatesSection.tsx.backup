/**
 * My Templates Section Component
 * 
 * Displays user's custom report templates above the existing Cardiologist Consults section.
 * Provides template management capabilities with mobile-first design.
 */

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Plus,
  Search,
  Filter,
  Clock,
  TrendingUp,
  FileText,
  Stethoscope,
  Sparkles,
  AlertCircle,
  RefreshCw,
} from 'lucide-react';
import { templateService } from '../../../services/templateService';
import { generateTemplateBasedReport } from '../../../services/diagnosisFlowiseService';
import { TemplateCreationModal } from './TemplateCreationModal';
import { TemplateManagementCard } from './TemplateManagementCard';
import { TemplateSearchBar } from './TemplateSearchBar';
import { TemplateDeleteConfirmation } from './TemplateDeleteConfirmation';

// Skeleton component for loading state - Premium card style
const TemplateSkeletonCard: React.FC = () => (
  <div className="relative bg-gradient-to-br from-gray-300 to-gray-400 dark:from-gray-700 dark:to-gray-800 rounded-2xl p-6 shadow-lg min-h-[180px] flex flex-col justify-between animate-pulse">
    {/* Header Section */}
    <div>
      <div className="flex items-start justify-between mb-3">
        <div className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-lg animate-pulse" />
        <div className="flex flex-col items-end space-y-1">
          <div className="w-20 h-5 bg-white/25 backdrop-blur-sm rounded-md animate-pulse" />
          <div className="w-12 h-4 bg-white/15 backdrop-blur-sm rounded-md animate-pulse" />
        </div>
      </div>
      
      <div className="h-6 bg-white/20 rounded animate-pulse mb-2 w-4/5" />
    </div>
    
    <div className="h-10 bg-white/15 rounded animate-pulse w-full" />
  </div>
);

import type { 
  MyTemplatesSectionProps, 
  UserReportTemplate,
  TemplateSearchFilters,
} from '../../../types/templates';

export const MyTemplatesSection: React.FC<MyTemplatesSectionProps> = ({
  onSelectTemplate,
  disabled = false,
  hasTranscript,
  transcript,
  onAddToHistory
}) => {
  // State management
  const [templates, setTemplates] = useState<UserReportTemplate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [searchFilters, setSearchFilters] = useState<TemplateSearchFilters>({
    search: '',
    order_by: 'created_at',
    order_direction: 'desc',
  });
  const [totalCount, setTotalCount] = useState(0);
  const [deleteConfirmation, setDeleteConfirmation] = useState<{
    isOpen: boolean;
    template: UserReportTemplate | null;
    isDeleting: boolean;
  }>({
    isOpen: false,
    template: null,
    isDeleting: false,
  });

  // Load templates
  const loadTemplates = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await templateService.getUserTemplates(searchFilters);
      setTemplates(response.templates);
      setTotalCount(response.total_count);
    } catch (err) {
      console.error('Failed to load templates:', err);
      setError('Failed to load templates. Please try again.');
    } finally {
      setLoading(false);
    }
  }, [searchFilters]);

  // Initial load - always load templates to show them in the UI
  useEffect(() => {
    loadTemplates();
  }, [loadTemplates]);

  // Handle template creation
  const handleTemplateCreated = useCallback((newTemplate: UserReportTemplate) => {
    setTemplates(prev => [newTemplate, ...prev]);
    setTotalCount(prev => prev + 1);
    setIsCreateModalOpen(false);
  }, []);

  // Handle template selection - Send directly to Flowise endpoint
  const handleTemplateSelect = useCallback(async (template: UserReportTemplate) => {
    if (disabled || !hasTranscript) return; // Prevent usage without transcript content

    try {
      // Record usage
      await templateService.recordTemplateUsage(template.id);
      
      // Update local state
      setTemplates(prev => 
        prev.map(t => 
          t.id === template.id 
            ? { ...t, usage_count: t.usage_count + 1, last_used_at: new Date().toISOString() }
            : t
        )
      );

      console.log('🚀 Custom template: Sending directly to Flowise endpoint');
      console.log('📋 Template:', template.name);
      console.log('📄 Transcript length:', transcript.length);
      
      // Send directly to Flowise using the same pattern as diagnosis cards
      const result = await generateTemplateBasedReport(transcript, template);
      
      if (result.success) {
        console.log('✅ Template processing successful');
        
        // Add the result to processing history for UI display with same structure as premium reports
        if (onAddToHistory) {
          const instruction = `Template: ${template.name}\n${template.example_structure.substring(0, 150)}...`;
          onAddToHistory(
            instruction,
            result.report,
            'flowise-diagnosis-agent', // Use same model name as premium cards for consistent display
            undefined, // tokens used - not available
            45 // Estimated processing time like premium cards
          );
          console.log('📈 Added template result to history with premium report structure');
        }
        
        console.log('📄 Generated report:', result.report.substring(0, 200) + '...');
      } else {
        console.error('❌ Template processing failed:', result.error);
        // Fallback to original behavior if Flowise fails
        const enhancedPrompt = `${template.example_structure}${template.notes ? `\n\nAdditional guidance: ${template.notes}` : ''}`;
        onSelectTemplate(enhancedPrompt);
      }
    } catch (err) {
      console.error('Failed to process custom template:', err);
      // Fallback to original behavior on error
      const enhancedPrompt = `${template.example_structure}${template.notes ? `\n\nAdditional guidance: ${template.notes}` : ''}`;
      onSelectTemplate(enhancedPrompt);
    }
  }, [disabled, hasTranscript, transcript, onSelectTemplate]);

  // Handle template edit
  const handleTemplateEdit = useCallback((template: UserReportTemplate) => {
    // TODO: Implement edit modal (will be added in integration phase)
    console.log('Edit template:', template.id);
  }, []);

  // Handle template delete - open confirmation modal
  const handleTemplateDelete = useCallback((template: UserReportTemplate) => {
    setDeleteConfirmation({
      isOpen: true,
      template,
      isDeleting: false,
    });
  }, []);

  // Handle delete confirmation
  const handleDeleteConfirm = useCallback(async () => {
    if (!deleteConfirmation.template) return;

    setDeleteConfirmation(prev => ({ ...prev, isDeleting: true }));

    try {
      await templateService.deleteTemplate(deleteConfirmation.template.id);
      setTemplates(prev => prev.filter(t => t.id !== deleteConfirmation.template!.id));
      setTotalCount(prev => prev - 1);
      setDeleteConfirmation({ isOpen: false, template: null, isDeleting: false });
    } catch (err) {
      console.error('Failed to delete template:', err);
      setError('Failed to delete template. Please try again.');
      setDeleteConfirmation(prev => ({ ...prev, isDeleting: false }));
    }
  }, [deleteConfirmation.template]);

  // Handle delete cancellation
  const handleDeleteCancel = useCallback(() => {
    if (!deleteConfirmation.isDeleting) {
      setDeleteConfirmation({ isOpen: false, template: null, isDeleting: false });
    }
  }, [deleteConfirmation.isDeleting]);

  // Filtered and sorted templates
  const displayTemplates = useMemo(() => {
    return templates;
  }, [templates]);

  // Show empty state message for templates when no transcript
  const showEmptyTemplateMessage = !hasTranscript;

  return (
    <div className="space-y-6">
      {/* My Templates Header */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-gradient-to-br from-[#2b6cb0] to-[#1a365d] rounded-xl flex items-center justify-center shadow-lg">
            <FileText className="w-4 h-4 text-white" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-slate-700 dark:text-slate-200">
              My Templates
            </h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              {totalCount} custom template{totalCount !== 1 ? 's' : ''}
            </p>
          </div>
        </div>
        
        <button
          onClick={() => setIsCreateModalOpen(true)}
          disabled={false} // Template creation is always enabled
          className="flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-gradient-to-r from-[#2b6cb0] to-[#1a365d] text-white hover:from-[#1a365d] hover:to-[#2b6cb0] shadow-md hover:shadow-lg"
          style={{ minHeight: '44px', minWidth: '44px' }} // Ensure 44px touch target
        >
          <Plus className="w-4 h-4" />
          <span className="hidden sm:inline">Add Template</span>
        </button>
      </div>

      {/* Empty Content Message */}
      {showEmptyTemplateMessage && (
        <div className="bg-gradient-to-br from-[#90cdf4]/10 to-[#63b3ed]/5 dark:from-[#1a365d]/20 dark:to-[#2b6cb0]/10 rounded-xl border border-[#63b3ed]/20 dark:border-[#2b6cb0]/30 p-4">
          <div className="flex items-start space-x-3">
            <div className="w-8 h-8 bg-gradient-to-br from-[#63b3ed] to-[#2b6cb0] rounded-lg flex items-center justify-center flex-shrink-0">
              <FileText className="w-4 h-4 text-white" />
            </div>
            <div className="flex-1">
              <h4 className="text-sm font-semibold text-[#1a365d] dark:text-[#90cdf4] mb-1">
                Custom Templates
              </h4>
              <p className="text-xs text-[#2b6cb0] dark:text-[#63b3ed] leading-relaxed">
                Create and manage your own report templates. Templates can be created anytime, but require transcript content or medical documents to generate reports.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Search and Filters */}
      <TemplateSearchBar
        searchQuery={searchFilters.search}
        onSearchChange={(search) => setSearchFilters(prev => ({ ...prev, search }))}
        filters={searchFilters}
        onFiltersChange={setSearchFilters}
        isLoading={loading}
      />

      {/* Loading State with Skeleton Cards */}
      {loading && (
        <div className="space-y-4">
          {/* Loading Message */}
          <div className="flex items-center justify-center py-6">
            <div className="flex items-center space-x-3">
              <RefreshCw className="w-5 h-5 text-[#2b6cb0] animate-spin" />
              <p className="text-sm text-slate-600 dark:text-slate-400">Loading templates...</p>
            </div>
          </div>
          
          {/* Skeleton Template Cards */}
          <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {Array.from({ length: 3 }, (_, i) => (
              <TemplateSkeletonCard key={i} />
            ))}
          </div>
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
          <div className="flex items-center space-x-2">
            <AlertCircle className="w-5 h-5 text-red-600 dark:text-red-400" />
            <p className="text-sm text-red-700 dark:text-red-300">{error}</p>
            <button
              onClick={loadTemplates}
              className="ml-auto text-sm text-red-600 dark:text-red-400 hover:underline"
            >
              Retry
            </button>
          </div>
        </div>
      )}

      {/* Templates Grid */}
      {!loading && !error && (
        <>
          {displayTemplates.length > 0 ? (
            <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
              {displayTemplates.map((template) => (
                <TemplateManagementCard
                  key={template.id}
                  template={template}
                  onEdit={handleTemplateEdit}
                  onDelete={handleTemplateDelete}
                  onSelect={handleTemplateSelect}
                  disabled={disabled || !hasTranscript} // Disable usage without transcript
                />
              ))}
            </div>
          ) : (
            // Empty State
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-blue-100 dark:bg-slate-700 rounded-2xl flex items-center justify-center mx-auto mb-4">
                <FileText className="w-8 h-8 text-blue-600 dark:text-blue-400" />
              </div>
              <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-2">
                No templates found
              </h3>
              <p className="text-sm text-slate-600 dark:text-slate-400 mb-4">
                {searchFilters.search 
                  ? 'Try adjusting your search terms or filters' 
                  : 'Create your first template to get started'}
              </p>
              {!searchFilters.search && (
                <button
                  onClick={() => setIsCreateModalOpen(true)}
                  disabled={false} // Template creation is always enabled
                  className="text-blue-600 dark:text-blue-400 hover:underline text-sm font-medium"
                >
                  Create your first template
                </button>
              )}
            </div>
          )}
        </>
      )}

      {/* Template Creation Modal */}
      <TemplateCreationModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onTemplateCreated={handleTemplateCreated}
      />

      {/* Delete Confirmation Modal */}
      <TemplateDeleteConfirmation
        isOpen={deleteConfirmation.isOpen}
        template={deleteConfirmation.template}
        onConfirm={handleDeleteConfirm}
        onCancel={handleDeleteCancel}
        isDeleting={deleteConfirmation.isDeleting}
      />
    </div>
  );
};