import React, { useState } from 'react';
import {
  Brain,
  Clock,
  Copy,
  Download,
  Share2,
  ChevronDown,
  ChevronUp,
  CheckCircle,
  AlertCircle,
  FileText,
  Stethoscope,
  Activity,
  Zap,
  Hash,
  Calendar,
  User,
  Shield,
  HeartHandshake
} from 'lucide-react';
import { MedicalButton } from '../../ui/MedicalDesignSystem';
import { formatMarkdown, extractCleanText, hasMarkdownFormatting } from '../../../utils/markdownFormatter';

interface ProcessingHistory {
  userInstruction: string;
  aiResponse: string;
  model: string;
  tokensUsed?: number;
  processingTime: number;
  timestamp: number;
}

interface MedicalAnalysisCardProps {
  analysis: ProcessingHistory;
  index: number;
  totalCount: number;
  onCopy?: (analysis: ProcessingHistory) => void;
  onDownload?: (analysis: ProcessingHistory) => void;
  onShare?: (analysis: ProcessingHistory) => void;
}

const formatProcessingTime = (milliseconds: number): string => {
  if (milliseconds < 1000) return `${milliseconds}ms`;
  return `${(milliseconds / 1000).toFixed(1)}s`;
};

const getAnalysisType = (instruction: string, model?: string): { type: string; icon: React.ElementType; color: string; isDiagnosis: boolean } => {
  const lower = instruction.toLowerCase();
  
  // Check if this is a diagnosis report (either by model name or instruction content)
  const isDiagnosis = model === 'flowise-diagnosis-agent' || 
                      lower.includes('i50.0') || 
                      lower.includes('heart failure') ||
                      lower.includes('გულის შეგუბებითი უკმარისობა') ||
                      (lower.includes('diagnosis') && lower.includes('emergency room'));
  
  if (isDiagnosis) {
    if (lower.includes('i50.0') || lower.includes('heart failure') || lower.includes('გულის შეგუბებითი უკმარისობა')) {
      return { type: 'Heart Failure ER Report', icon: HeartHandshake, color: 'from-rose-600 to-red-700', isDiagnosis: true };
    }
    return { type: 'Diagnosis ER Report', icon: HeartHandshake, color: 'from-rose-600 to-red-700', isDiagnosis: true };
  }
  
  if (lower.includes('symptom') || lower.includes('diagnos')) {
    return { type: 'Clinical Assessment', icon: Stethoscope, color: 'from-red-500 to-pink-600', isDiagnosis: false };
  }
  if (lower.includes('medication') || lower.includes('drug') || lower.includes('dosage')) {
    return { type: 'Medication Review', icon: Shield, color: 'from-blue-500 to-indigo-600', isDiagnosis: false };
  }
  if (lower.includes('summary') || lower.includes('summarize')) {
    return { type: 'Clinical Summary', icon: FileText, color: 'from-purple-500 to-violet-600', isDiagnosis: false };
  }
  if (lower.includes('procedure') || lower.includes('treatment')) {
    return { type: 'Treatment Plan', icon: Activity, color: 'from-green-500 to-emerald-600', isDiagnosis: false };
  }
  if (lower.includes('demographic') || lower.includes('history')) {
    return { type: 'Patient History', icon: User, color: 'from-orange-500 to-amber-600', isDiagnosis: false };
  }
  
  return { type: 'General Analysis', icon: Brain, color: 'from-indigo-500 to-purple-600', isDiagnosis: false };
};

const copyToClipboard = async (content: string) => {
  try {
    await navigator.clipboard.writeText(content);
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
  }
};

const downloadAsFile = (content: string, filename: string) => {
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

export const MedicalAnalysisCard: React.FC<MedicalAnalysisCardProps> = ({
  analysis,
  index,
  totalCount,
  onCopy,
  onDownload,
  onShare
}) => {
  const [isExpanded, setIsExpanded] = useState(index === 0); // First card expanded by default
  const analysisType = getAnalysisType(analysis.userInstruction, analysis.model);
  const IconComponent = analysisType.icon;

  // Analysis type and icon setup

  const handleCopy = async () => {
    let content: string;
    
    if (analysisType.isDiagnosis) {
      // For diagnosis reports, copy only the clean response text
      content = extractCleanText(analysis.aiResponse);
    } else {
      // For regular reports, copy full content
      content = `Medical Analysis Report
Generated: ${new Date(analysis.timestamp).toLocaleString()}
Analysis Type: ${analysisType.type}

Request: ${analysis.userInstruction}

AI Response:
${analysis.aiResponse}

Processing Details:
- Model: ${analysis.model}
- Processing Time: ${formatProcessingTime(analysis.processingTime)}
${analysis.tokensUsed ? `- Tokens Used: ${analysis.tokensUsed}` : ''}

---
Generated by MediMind Expert AI Processing System`;
    }
    
    await copyToClipboard(content);
    onCopy?.(analysis);
  };

  const handleDownload = () => {
    const content = `Medical Analysis Report
Generated: ${new Date(analysis.timestamp).toLocaleString()}
Analysis Type: ${analysisType.type}

REQUEST:
${analysis.userInstruction}

AI ANALYSIS:
${analysis.aiResponse}

PROCESSING METADATA:
- Model: ${analysis.model}
- Processing Time: ${formatProcessingTime(analysis.processingTime)}
${analysis.tokensUsed ? `- Tokens Used: ${analysis.tokensUsed}` : ''}

---
Generated by MediMind Expert
Medical AI Processing System`;
    
    const filename = `medical-analysis-${new Date(analysis.timestamp).toISOString().slice(0, 10)}-${index + 1}.txt`;
    downloadAsFile(content, filename);
    onDownload?.(analysis);
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `Medical Analysis - ${analysisType.type}`,
          text: `${analysis.userInstruction}\n\n${analysis.aiResponse}`,
        });
        onShare?.(analysis);
      } catch (error) {
        console.error('Error sharing:', error);
      }
    }
  };

  // Safety check for analysis data
  if (!analysis || !analysis.userInstruction || !analysis.aiResponse) {
    return (
      <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-xl p-4">
        <p className="text-red-600 dark:text-red-400 text-sm">
          ⚠️ Invalid analysis data: {JSON.stringify({
            hasAnalysis: !!analysis,
            hasInstruction: !!analysis?.userInstruction,
            hasResponse: !!analysis?.aiResponse,
            timestamp: analysis?.timestamp
          })}
        </p>
      </div>
    );
  }

  return (
    <div className="group medical-analysis-card bg-white dark:bg-slate-800 rounded-xl md:rounded-2xl border border-slate-200/60 dark:border-slate-700/60 shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden w-full max-w-full">
      {/* Card Header */}
      <div className="relative bg-gradient-to-br from-slate-50/80 to-white dark:from-slate-800/80 dark:to-slate-900/80 border-b border-slate-200/50 dark:border-slate-700/50">
        {/* Priority Badge */}
        <div className="absolute top-4 right-4 z-20">
          <div className="flex items-center space-x-2">
            <div className="bg-slate-100 dark:bg-slate-700 rounded-full px-3 py-1">
              <span className="text-xs font-semibold text-slate-600 dark:text-slate-300">
                #{totalCount - index}
              </span>
            </div>
            <div className={`bg-gradient-to-r ${analysisType.color} rounded-full p-2 shadow-lg`}>
              <IconComponent className="w-4 h-4 text-white" />
            </div>
          </div>
        </div>

        <div className="p-4 pr-24 md:p-6 md:pr-32">
          {/* Analysis Type & Status */}
          <div className="flex items-center space-x-3 mb-3">
            <div className={`bg-gradient-to-r ${analysisType.color} rounded-xl p-2.5 shadow-lg`}>
              <IconComponent className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-bold text-slate-900 dark:text-slate-100">
                {analysisType.type}
              </h3>
              <div className="flex items-center space-x-3 text-sm text-slate-500 dark:text-slate-400">
                <div className="flex items-center space-x-1">
                  <Calendar className="w-3 h-3" />
                  <span>{new Date(analysis.timestamp).toLocaleDateString()}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Clock className="w-3 h-3" />
                  <span>{formatProcessingTime(analysis.processingTime)}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <CheckCircle className="w-3 h-3 text-green-500" />
                  <span className="text-green-600 dark:text-green-400 font-medium">Complete</span>
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <MedicalButton
                variant="ghost"
                size="sm"
                leftIcon={Copy}
                onClick={handleCopy}
                className="text-slate-600 dark:text-slate-400 hover:text-emerald-600"
              >
                Copy
              </MedicalButton>
              <MedicalButton
                variant="ghost"
                size="sm"
                leftIcon={Download}
                onClick={handleDownload}
                className="text-slate-600 dark:text-slate-400 hover:text-blue-600"
              >
                Export
              </MedicalButton>
              {navigator.share && (
                <MedicalButton
                  variant="ghost"
                  size="sm"
                  leftIcon={Share2}
                  onClick={handleShare}
                  className="text-slate-600 dark:text-slate-400 hover:text-purple-600"
                >
                  Share
                </MedicalButton>
              )}
            </div>
            
            <MedicalButton
              variant="ghost"
              size="sm"
              rightIcon={isExpanded ? ChevronUp : ChevronDown}
              onClick={() => setIsExpanded(!isExpanded)}
              className="text-slate-600 dark:text-slate-400"
            >
              {isExpanded ? 'Collapse' : 'Expand'}
            </MedicalButton>
          </div>
        </div>
      </div>

      {/* Collapsible Content */}
      <div className={`transition-all duration-300 ${isExpanded ? 'max-h-none opacity-100' : 'max-h-0 opacity-0 overflow-hidden'}`}>
        <div className="p-4 space-y-4 md:p-6 md:space-y-6">
          {/* User Request - Hide for diagnosis reports */}
          {!analysisType.isDiagnosis && (
            <div className="bg-slate-50 dark:bg-slate-900/50 rounded-xl p-4 border border-slate-200/50 dark:border-slate-700/50">
              <div className="flex items-start space-x-3">
                <div className="bg-blue-100 dark:bg-blue-900/30 rounded-lg p-2 flex-shrink-0">
                  <User className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                </div>
                <div className="flex-1">
                  <h4 className="text-sm font-semibold text-slate-900 dark:text-slate-100 mb-2">
                    Analysis Request
                  </h4>
                  <p className="text-sm text-slate-700 dark:text-slate-300 leading-relaxed">
                    {analysis.userInstruction}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* AI Response */}
          <div className="bg-gradient-to-br from-emerald-50/80 to-teal-50/60 dark:from-emerald-900/20 dark:to-teal-900/20 rounded-xl p-4 border border-emerald-200/50 dark:border-emerald-700/30">
            <div className="flex items-start space-x-3">
              <div className="bg-emerald-100 dark:bg-emerald-900/40 rounded-lg p-2 flex-shrink-0">
                {analysisType.isDiagnosis ? (
                  <HeartHandshake className="w-4 h-4 text-emerald-600 dark:text-emerald-400" />
                ) : (
                  <Brain className="w-4 h-4 text-emerald-600 dark:text-emerald-400" />
                )}
              </div>
              <div className="flex-1">
                <h4 className="text-sm font-semibold text-slate-900 dark:text-slate-100 mb-2">
                  {analysisType.isDiagnosis ? 'Medical Report' : 'AI Clinical Analysis'}
                </h4>
                <div className="prose prose-sm dark:prose-invert max-w-none">
                  {hasMarkdownFormatting(analysis.aiResponse) ? (
                    // Render formatted markdown for diagnosis reports
                    formatMarkdown(analysis.aiResponse)
                  ) : (
                    // Render as plain text for regular reports
                    <div className="text-sm text-slate-800 dark:text-slate-200 leading-relaxed whitespace-pre-wrap">
                      {analysis.aiResponse}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Metadata Footer */}
          <div className="flex items-center justify-between pt-4 border-t border-slate-200/50 dark:border-slate-700/50">
            <div className="flex items-center space-x-4 text-xs text-slate-500 dark:text-slate-400">
              <div className="flex items-center space-x-1">
                <Zap className="w-3 h-3" />
                <span className="font-medium">{analysis.model}</span>
              </div>
              {analysis.tokensUsed && (
                <div className="flex items-center space-x-1">
                  <Hash className="w-3 h-3" />
                  <span>{analysis.tokensUsed} tokens</span>
                </div>
              )}
              <div className="flex items-center space-x-1">
                <Clock className="w-3 h-3" />
                <span>{new Date(analysis.timestamp).toLocaleTimeString()}</span>
              </div>
            </div>
            
            <div className="flex items-center space-x-1 px-2 py-1 bg-green-100 dark:bg-green-900/30 rounded-md">
              <div className="w-2 h-2 bg-green-500 rounded-full" />
              <span className="text-xs font-semibold text-green-700 dark:text-green-300">
                Analysis Complete
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};