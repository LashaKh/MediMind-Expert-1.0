import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Calculator, Info, TrendingUp, Star, Brain, User, Activity, BarChart3, Stethoscope, Award, AlertCircle, Clock, Target, Heart, Zap, ChevronRight, CheckCircle, ArrowLeft } from 'lucide-react';
import { 
  CalculatorContainer, 
  CalculatorInput, 
  CalculatorSelect, 
  CalculatorCheckbox, 
  CalculatorButton 
} from '../ui/calculator-ui';
import { useTranslation } from '../../hooks/useTranslation';
import { safe, ErrorSeverity } from '../../lib/utils/errorHandling';

// Enhanced interfaces with better typing
interface PREVENTFormData {
  age: string;
  sex: 'male' | 'female' | '';
  height: string; // in cm
  weight: string; // in kg
  totalCholesterol: string;
  hdlCholesterol: string;
  systolicBP: string;
  serumCreatinine: string; // mg/dL
  onHypertensionMeds: boolean;
  onStatin: boolean;
  diabetes: boolean;
  currentSmoker: boolean;
  // Optional enhanced factors
  hba1c: string; // %
  uacr: string; // mg/g
}

interface PREVENTResult {
  bmi: number;
  eGFR: number;
  sdiGroup: number | null;
  hasEnhancedCKM: boolean;
  tenYearRisk: {
    totalCVD: number;
    ascvd: number;
    heartFailure: number;
  };
  thirtyYearRisk?: {
    totalCVD: number;
    ascvd: number;
    heartFailure: number;
  };
  riskCategory: 'low' | 'borderline' | 'intermediate' | 'high';
  recommendations: string[];
}

interface FormErrors {
  [key: string]: string;
}

interface StepConfig {
  id: number;
  title: string;
  description: string;
  icon: React.ComponentType<{ className?: string }>;
  color: string;
  gradient: string;
}

// TypeScript types for PREVENT coefficients
type CoefficientSet = {
  C0: number; C1: number; C2: number; C3: number; C4: number; C5: number;
  C6: number; C7: number; C8: number; C9: number; C10: number; C11: number;
  C12: number; C13: number; C14: number; C15: number; C16: number; C17: number;
  C18: number; C19: number; C20: number; C21: number; C22: number; C23: number;
  C24: number; C25: number; C26: number; C27: number; C28: number; C29: number;
  C30: number; C31: number;
};

type Timeframe = '10' | '30';
type Gender = 'MALE' | 'FEMALE';
type Endpoint = 'TOTAL_CVD' | 'ASCVD' | 'HF';

// Official AHA PREVENT 2023 Coefficient Tables - Complete Implementation
const PREVENT_COEFFICIENTS: Record<string, CoefficientSet> = {
  // 10-year FULL MODEL coefficients (when 2 or 3 novel factors are entered)
  FULL_10_FEMALE_TOTAL_CVD: {
    C0: 0.7716794, C1: 0, C2: 0.0062109, C3: -0.1547756, C4: -0.1933123, C5: 0.3071217,
    C6: 0.496753, C7: 0.466605, C8: 0, C9: 0, C10: 0.4780697, C11: 0.0529077,
    C12: 0.3034892, C13: -0.1556524, C14: -0.0667026, C15: 0.1061825, C16: -0.0742271, C17: 0.0288245,
    C18: -0.0875188, C19: -0.2267102, C20: -0.0676125, C21: 0, C22: -0.1493231, C23: 0.1361989,
    C24: 0.2261596, C25: 0.1804508, C26: 0.1645922, C27: 0.0198413, C28: 0.1298513, C29: 0.1412555, C30: -0.0031658, C31: -3.860385
  },
  FULL_10_MALE_TOTAL_CVD: {
    C0: 0.7847578, C1: 0, C2: 0.0534485, C3: -0.0911282, C4: -0.4921973, C5: 0.2972415,
    C6: 0.4527054, C7: 0.3726641, C8: 0, C9: 0, C10: 0.3886854, C11: 0.0081661,
    C12: 0.2508052, C13: -0.1538484, C14: -0.0474695, C15: 0.1415382, C16: -0.0436455, C17: 0.0199549,
    C18: -0.1022686, C19: -0.1762507, C20: -0.0715873, C21: 0, C22: -0.1428668, C23: 0.0802431,
    C24: 0.275073, C25: 0.144759, C26: 0.1772853, C27: 0.1095674, C28: 0.1165698, C29: 0.1048297, C30: -0.0230072, C31: -3.631387
  },
  FULL_10_FEMALE_ASCVD: {
    C0: 0.7023067, C1: 0, C2: 0.0898765, C3: -0.1407316, C4: -0.0256648, C5: 0.314511,
    C6: 0.4799217, C7: 0.4062049, C8: 0, C9: 0, C10: 0.3847744, C11: 0.0495174,
    C12: 0.2133861, C13: -0.0678552, C14: -0.0451416, C15: 0.0788187, C16: -0.0535985, C17: 0.0291762,
    C18: -0.0961839, C19: -0.2001466, C20: -0.0586472, C21: 0, C22: -0.1537791, C23: 0.1413965,
    C24: 0.228136, C25: 0.1588908, C26: 0.1371824, C27: 0.0061613, C28: 0.123192, C29: 0.1410572, C30: 0.005866, C31: -4.291503
  },
  FULL_10_MALE_ASCVD: {
    C0: 0.7128741, C1: 0, C2: 0.1465201, C3: -0.1125794, C4: -0.3387216, C5: 0.2980252,
    C6: 0.399583, C7: 0.3379111, C8: 0, C9: 0, C10: 0.2582604, C11: 0.0147769,
    C12: 0.1686621, C13: -0.1073619, C14: -0.0381038, C15: 0.1034169, C16: -0.0228755, C17: 0.0267453,
    C18: -0.0897449, C19: -0.1497464, C20: -0.077206, C21: 0, C22: -0.1198368, C23: 0.0651121,
    C24: 0.2676683, C25: 0.1388492, C26: 0.1375837, C27: 0.0652944, C28: 0.101282, C29: 0.1092726, C30: -0.0112852, C31: -3.969788
  },
  FULL_10_FEMALE_HF: {
    C0: 0.884209, C1: 0, C2: 0, C3: 0, C4: -0.421474, C5: 0.3002919,
    C6: 0.6170359, C7: 0.5380269, C8: -0.0191335, C9: 0.2764302, C10: 0.5975847, C11: 0.0654197,
    C12: 0.3313614, C13: 0, C14: -0.1002304, C15: 0, C16: 0, C17: 0,
    C18: -0.0845363, C19: -0.2989062, C20: -0.1111354, C21: 0.0008104, C22: -0.1666635, C23: 0.1213034,
    C24: 0.2314147, C25: 0.1819138, C26: 0.1948135, C27: 0.0395368, C28: 0.176668, C29: 0.1614911, C30: -0.0010583, C31: -4.896524
  },
  FULL_10_MALE_HF: {
    C0: 0.9095703, C1: 0, C2: 0, C3: 0, C4: -0.6765184, C5: 0.3111651,
    C6: 0.5535052, C7: 0.4326811, C8: -0.0854286, C9: 0.3551736, C10: 0.5102245, C11: 0.015472,
    C12: 0.2570964, C13: 0, C14: -0.0591177, C15: 0, C16: 0, C17: 0,
    C18: -0.1219056, C19: -0.2437577, C20: -0.105363, C21: 0.0037907, C22: -0.1660207, C23: 0.1106372,
    C24: 0.3371204, C25: 0.1694628, C26: 0.2164607, C27: 0.1702805, C28: 0.148297, C29: 0.1234088, C30: -0.0234637, C31: -4.663513
  },

  // 30-year FULL MODEL coefficients
  FULL_30_FEMALE_TOTAL_CVD: {
    C0: 0.5073749, C1: -0.0981751, C2: 0.0162303, C3: -0.1617147, C4: -0.1111241, C5: 0.282946,
    C6: 0.4004069, C7: 0.2918701, C8: 0, C9: 0, C10: 0.1017102, C11: 0.0622643,
    C12: 0.2872416, C13: -0.0768135, C14: -0.0557282, C15: 0.0917585, C16: -0.0679131, C17: 0.029076,
    C18: -0.0907755, C19: -0.2702118, C20: -0.1373216, C21: 0, C22: -0.1255864, C23: 0.1067741,
    C24: 0.1853138, C25: 0.1567115, C26: 0.1028065, C27: -0.0006181, C28: 0.0925285, C29: 0.0975598, C30: 0.0101713, C31: -1.748475
  },
  FULL_30_MALE_TOTAL_CVD: {
    C0: 0.4427595, C1: -0.1064108, C2: 0.0629381, C3: -0.1015427, C4: -0.2542326, C5: 0.2549679,
    C6: 0.333835, C7: 0.1873833, C8: 0, C9: 0, C10: 0.0246102, C11: 0.0552014,
    C12: 0.1979729, C13: -0.0407714, C14: -0.0365522, C15: 0.1232822, C16: -0.0441334, C17: 0.0177865,
    C18: -0.1046657, C19: -0.2116113, C20: -0.1277905, C21: 0, C22: -0.0955922, C23: 0.0256704,
    C24: 0.1887637, C25: 0.089241, C26: 0.0894596, C27: 0.0710124, C28: 0.0676202, C29: 0.063409, C30: 0.0038783, C31: -1.504558
  },
  FULL_30_FEMALE_ASCVD: {
    C0: 0.4386739, C1: -0.0921956, C2: 0.0977728, C3: -0.1453525, C4: 0.0590925, C5: 0.2862862,
    C6: 0.3669136, C7: 0.2354695, C8: 0, C9: 0, C10: 0.0354338, C11: 0.0573093,
    C12: 0.1840085, C13: 0.0117504, C14: -0.0331945, C15: 0.0664311, C16: -0.0492826, C17: 0.0288888,
    C18: -0.0964709, C19: -0.2279648, C20: -0.120405, C21: 0, C22: -0.1157635, C23: 0.1107632,
    C24: 0.1840367, C25: 0.1308962, C26: 0.0810739, C27: -0.0147785, C28: 0.0794709, C29: 0.1002615, C30: 0.017301, C31: -2.314066
  },
  FULL_30_MALE_ASCVD: {
    C0: 0.3743566, C1: -0.0995499, C2: 0.1544808, C3: -0.1215297, C4: -0.1083968, C5: 0.2555179,
    C6: 0.2696998, C7: 0.1628432, C8: 0, C9: 0, C10: -0.077507, C11: 0.0583407,
    C12: 0.1120322, C13: -0.0025063, C14: -0.0256116, C15: 0.0886745, C16: -0.0254507, C17: 0.0244639,
    C18: -0.0869146, C19: -0.165745, C20: -0.1244714, C21: 0, C22: -0.0624552, C23: 0.015675,
    C24: 0.1864231, C25: 0.0845697, C26: 0.0560171, C27: 0.0252244, C28: 0.0501422, C29: 0.0722905, C30: 0.0114945, C31: -1.985368
  },
  FULL_30_FEMALE_HF: {
    C0: 0.5927507, C1: -0.1028754, C2: 0, C3: 0, C4: -0.3593781, C5: 0.2628556,
    C6: 0.5113472, C7: 0.347344, C8: 0.0564656, C9: 0.2363857, C10: 0.1971295, C11: 0.0735227,
    C12: 0.3219386, C13: 0, C14: -0.0880321, C15: 0, C16: 0, C17: 0,
    C18: -0.0863132, C19: -0.3425359, C20: -0.181405, C21: 0.0031285, C22: -0.1356989, C23: 0.0847634,
    C24: 0.18397, C25: 0.1485802, C26: 0.1273306, C27: 0.0167008, C28: 0.1378342, C29: 0.1138832, C30: 0.0138979, C31: -2.642208
  },
  FULL_30_MALE_HF: {
    C0: 0.5478829, C1: -0.1111928, C2: 0, C3: 0, C4: -0.4547346, C5: 0.2527602,
    C6: 0.4385384, C7: 0.2397952, C8: 0.0640931, C9: 0.2643081, C10: 0.1354588, C11: 0.0570689,
    C12: 0.220666, C13: 0, C14: -0.0436769, C15: 0, C16: 0, C17: 0,
    C18: -0.1168376, C19: -0.2730055, C20: -0.1573691, C21: -0.0174998, C22: -0.1128676, C23: 0.057746,
    C24: 0.2446441, C25: 0.1076782, C26: 0.1233486, C27: 0.1274796, C28: 0.0985062, C29: 0.0804844, C30: 0.0022806, C31: -2.425439
  },

  // 10-year BASE MODEL coefficients (when no novel factors are entered)
  BASE_10_FEMALE_TOTAL_CVD: {
    C0: 0.7939329, C1: 0, C2: 0.0305239, C3: -0.1606857, C4: -0.2394003, C5: 0.3600781,
    C6: 0.8667604, C7: 0.5360739, C8: 0, C9: 0, C10: 0.6045917, C11: 0.0433769,
    C12: 0.3151672, C13: -0.1477655, C14: -0.0663612, C15: 0.1197879, C16: -0.0819715, C17: 0.0306769,
    C18: -0.0946348, C19: -0.27057, C20: -0.078715, C21: 0, C22: -0.1637806, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.307728
  },
  BASE_10_MALE_TOTAL_CVD: {
    C0: 0.7688528, C1: 0, C2: 0.0736174, C3: -0.0954431, C4: -0.4347345, C5: 0.3362658,
    C6: 0.7692857, C7: 0.4386871, C8: 0, C9: 0, C10: 0.5378979, C11: 0.0164827,
    C12: 0.288879, C13: -0.1337349, C14: -0.0475924, C15: 0.150273, C16: -0.0517874, C17: 0.0191169,
    C18: -0.1049477, C19: -0.2251948, C20: -0.0895067, C21: 0, C22: -0.1543702, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.031168
  },

  // HbA1C MODEL coefficients (when only HbA1C is entered)
  HBA1C_10_FEMALE_TOTAL_CVD: {
    C0: 0.7858178, C1: 0, C2: 0.0194438, C3: -0.1521964, C4: -0.2296681, C5: 0.3465777,
    C6: 0.5366241, C7: 0.5411682, C8: 0, C9: 0, C10: 0.5931898, C11: 0.0472458,
    C12: 0.3158567, C13: -0.1535174, C14: -0.0687752, C15: 0.1054746, C16: -0.0761119, C17: 0.0307469,
    C18: -0.0905966, C19: -0.2241857, C20: -0.080186, C21: 0, C22: -0.1667286, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1338348, C29: 0.1622409, C30: -0.0142496, C31: -3.306162
  },
  HBA1C_10_MALE_TOTAL_CVD: {
    C0: 0.7699177, C1: 0, C2: 0.0605093, C3: -0.0888525, C4: -0.417713, C5: 0.3288657,
    C6: 0.4759471, C7: 0.4385663, C8: 0, C9: 0, C10: 0.5334616, C11: 0.0206431,
    C12: 0.2917524, C13: -0.1383313, C14: -0.0482622, C15: 0.1393796, C16: -0.0463501, C17: 0.0205926,
    C18: -0.1037717, C19: -0.1737697, C20: -0.0915839, C21: 0, C22: -0.1637039, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.13159, C29: 0.1295185, C30: -0.0128373, C31: -3.040901
  },
  HBA1C_10_FEMALE_ASCVD: {
    C0: 0.7111831, C1: 0, C2: 0.106797, C3: -0.1425745, C4: -0.0736824, C5: 0.3480844,
    C6: 0.5112951, C7: 0.4880292, C8: 0, C9: 0, C10: 0.4754997, C11: 0.0438132,
    C12: 0.2259093, C13: -0.0648872, C14: -0.0437645, C15: 0.0697082, C16: -0.0506382, C17: 0.0327475,
    C18: -0.0996442, C19: -0.1924338, C20: -0.0803539, C21: 0, C22: -0.1682586, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1339055, C29: 0.1596461, C30: 0.0015678, C31: -3.838746
  },
  HBA1C_10_MALE_ASCVD: {
    C0: 0.7064146, C1: 0, C2: 0.1532267, C3: -0.1082166, C4: -0.2675288, C5: 0.3173809,
    C6: 0.432604, C7: 0.3958842, C8: 0, C9: 0, C10: 0.3665014, C11: 0.0250243,
    C12: 0.2061158, C13: -0.0899988, C14: -0.0334959, C15: 0.1034168, C16: -0.0255406, C17: 0.0247538,
    C18: -0.0917441, C19: -0.1499195, C20: -0.098089, C21: 0, C22: -0.1305231, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1157161, C29: 0.1288303, C30: -0.0010001, C31: -3.51835
  },
  HBA1C_10_FEMALE_HF: {
    C0: 0.8997391, C1: 0, C2: 0, C3: 0, C4: -0.4422749, C5: 0.3378691,
    C6: 0.681284, C7: 0.5886005, C8: -0.0148657, C9: 0.2958374, C10: 0.73447, C11: 0.05926,
    C12: 0.3543475, C13: 0, C14: -0.1002139, C15: 0, C16: 0, C17: 0,
    C18: -0.0878765, C19: -0.303684, C20: -0.1178943, C21: -0.008345, C22: -0.1912183, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1856442, C29: 0.1833083, C30: -0.0143112, C31: -4.288225
  },
  HBA1C_10_MALE_HF: {
    C0: 0.911787, C1: 0, C2: 0, C3: 0, C4: -0.6568071, C5: 0.3524645,
    C6: 0.5849752, C7: 0.5014014, C8: -0.0512352, C9: 0.365294, C10: 0.6892219, C11: 0.0292377,
    C12: 0.3038296, C13: 0, C14: -0.0515032, C15: 0, C16: 0, C17: 0,
    C18: -0.1262343, C19: -0.2449514, C20: -0.1392217, C21: 0.0009592, C22: -0.1917105, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1652857, C29: 0.1505859, C30: -0.0113444, C31: -3.961954
  },

  // UACR MODEL coefficients (when only UACR is entered)
  UACR_10_FEMALE_TOTAL_CVD: {
    C0: 0.7969249, C1: 0, C2: 0.0256635, C3: -0.1588107, C4: -0.2255701, C5: 0.3396649,
    C6: 0.8047515, C7: 0.5285338, C8: 0, C9: 0, C10: 0.4803511, C11: 0.0434472,
    C12: 0.2985207, C13: -0.1497787, C14: -0.0742889, C15: 0.106756, C16: -0.0778126, C17: 0.0306768,
    C18: -0.0907168, C19: -0.2705122, C20: -0.0830564, C21: 0, C22: -0.1389249, C23: 0,
    C24: 0, C25: 0, C26: 0.1793037, C27: 0.0132073, C28: 0, C29: 0, C30: 0, C31: -3.738341
  },
  UACR_10_MALE_TOTAL_CVD: {
    C0: 0.7768655, C1: 0, C2: 0.0659949, C3: -0.0951111, C4: -0.420667, C5: 0.3120151,
    C6: 0.698521, C7: 0.4314669, C8: 0, C9: 0, C10: 0.3841364, C11: 0.009384,
    C12: 0.2676494, C13: -0.1390966, C14: -0.0579315, C15: 0.1383719, C16: -0.0488332, C17: 0.0200406,
    C18: -0.102454, C19: -0.2236355, C20: -0.089485, C21: 0, C22: -0.1321848, C23: 0,
    C24: 0, C25: 0, C26: 0.1887974, C27: 0.0916979, C28: 0, C29: 0, C30: 0, C31: -3.510705
  },
  UACR_10_FEMALE_ASCVD: {
    C0: 0.7201999, C1: 0, C2: 0.1135771, C3: -0.1493506, C4: -0.0726677, C5: 0.3436259,
    C6: 0.7773094, C7: 0.4746662, C8: 0, C9: 0, C10: 0.3824646, C11: 0.0394178,
    C12: 0.2125182, C13: -0.0603046, C14: -0.0466053, C15: 0.0733118, C16: -0.0534262, C17: 0.0325689,
    C18: -0.0999887, C19: -0.2411762, C20: -0.0826941, C21: 0, C22: -0.1444737, C23: 0,
    C24: 0, C25: 0, C26: 0.1501217, C27: 0.0050257, C28: 0, C29: 0, C30: 0, C31: -4.174614
  },
  UACR_10_MALE_ASCVD: {
    C0: 0.7141718, C1: 0, C2: 0.1602194, C3: -0.1139086, C4: -0.2719456, C5: 0.3058719,
    C6: 0.6600631, C7: 0.3884022, C8: 0, C9: 0, C10: 0.2466316, C11: 0.0151852,
    C12: 0.186167, C13: -0.0894395, C14: -0.0411884, C15: 0.1058212, C16: -0.028089, C17: 0.0240427,
    C18: -0.0912325, C19: -0.2004894, C20: -0.096936, C21: 0, C22: -0.1022867, C23: 0,
    C24: 0, C25: 0, C26: 0.1510073, C27: 0.0556, C28: 0, C29: 0, C30: 0, C31: -3.85146
  },
  UACR_10_FEMALE_HF: {
    C0: 0.9145975, C1: 0, C2: 0, C3: 0, C4: -0.4441346, C5: 0.3260323,
    C6: 0.9611365, C7: 0.5755787, C8: 0.0008831, C9: 0.2988964, C10: 0.5915291, C11: 0.0556823,
    C12: 0.3314097, C13: 0, C14: -0.1078596, C15: 0, C16: 0, C17: 0,
    C18: -0.0875231, C19: -0.356859, C20: -0.1220248, C21: -0.0053637, C22: -0.1610389, C23: 0,
    C24: 0, C25: 0, C26: 0.2197281, C27: 0.0326667, C28: 0, C29: 0, C30: 0, C31: -4.841506
  },
  UACR_10_MALE_HF: {
    C0: 0.9111795, C1: 0, C2: 0, C3: 0, C4: -0.6693649, C5: 0.3290082,
    C6: 0.8377655, C7: 0.4978917, C8: -0.042749, C9: 0.3624165, C10: 0.5075796, C11: 0.0137716,
    C12: 0.2739963, C13: 0, C14: -0.0645712, C15: 0, C16: 0, C17: 0,
    C18: -0.1230039, C19: -0.3013297, C20: -0.1410318, C21: 0.0021531, C22: -0.1548018, C23: 0,
    C24: 0, C25: 0, C26: 0.2306299, C27: 0.1472194, C28: 0, C29: 0, C30: 0, C31: -4.556907
  },

  // SDI MODEL coefficients (when only SDI is entered)
  SDI_10_FEMALE_TOTAL_CVD: {
    C0: 0.7754083, C1: 0, C2: 0.0221756, C3: -0.1650828, C4: -0.2180808, C5: 0.3381188,
    C6: 0.8624372, C7: 0.4663953, C8: 0, C9: 0, C10: 0.5919004, C11: 0.0516821,
    C12: 0.3182166, C13: -0.1460816, C14: -0.0574455, C15: 0.1302287, C16: -0.083509, C17: 0.0282181,
    C18: -0.0952647, C19: -0.2718966, C20: -0.0641738, C21: 0, C22: -0.1717026, C23: 0.1442776,
    C24: 0.2421409, C25: 0.1885076, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.461564
  },
  SDI_10_MALE_TOTAL_CVD: {
    C0: 0.7756377, C1: 0, C2: 0.0715325, C3: -0.0976775, C4: -0.5186614, C5: 0.3235653,
    C6: 0.7722496, C7: 0.3761129, C8: 0, C9: 0, C10: 0.5180893, C11: 0.0118451,
    C12: 0.2634094, C13: -0.1455263, C14: -0.0367013, C15: 0.1617785, C16: -0.0507669, C17: 0.0178356,
    C18: -0.1059337, C19: -0.2236755, C20: -0.0723216, C21: 0, C22: -0.1548205, C23: 0.0889119,
    C24: 0.291897, C25: 0.1508151, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.159572
  },
  SDI_10_FEMALE_ASCVD: {
    C0: 0.7028123, C1: 0, C2: 0.1056078, C3: -0.1502263, C4: -0.0488757, C5: 0.3402681,
    C6: 0.838022, C7: 0.4064592, C8: 0, C9: 0, C10: 0.4838394, C11: 0.0480415,
    C12: 0.2270648, C13: -0.0585626, C14: -0.0349485, C15: 0.1017299, C16: -0.062389, C17: 0.0285106,
    C18: -0.1033711, C19: -0.2477845, C20: -0.0544326, C21: 0, C22: -0.1735372, C23: 0.1473705,
    C24: 0.2451878, C25: 0.1691593, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.955898
  },
  SDI_10_MALE_ASCVD: {
    C0: 0.7150087, C1: 0, C2: 0.1627339, C3: -0.1194988, C4: -0.363659, C5: 0.3179476,
    C6: 0.7156422, C7: 0.3404477, C8: 0, C9: 0, C10: 0.3545754, C11: 0.0157875,
    C12: 0.1786233, C13: -0.1018269, C14: -0.028313, C15: 0.1209467, C16: -0.0285806, C17: 0.0247348,
    C18: -0.0919494, C19: -0.1981491, C20: -0.0776891, C21: 0, C22: -0.1284899, C23: 0.0728242,
    C24: 0.2824453, C25: 0.1437348, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.624712
  },
  SDI_10_FEMALE_HF: {
    C0: 0.8819156, C1: 0, C2: 0, C3: 0, C4: -0.4495491, C5: 0.3457405,
    C6: 1.02632, C7: 0.5371646, C8: -0.0168447, C9: 0.2805126, C10: 0.7315223, C11: 0.0651679,
    C12: 0.3491487, C13: 0, C14: -0.0890335, C15: 0, C16: 0, C17: 0,
    C18: -0.0971028, C19: -0.3528078, C20: -0.106216, C21: 0.0064998, C22: -0.1899413, C23: 0.1343318,
    C24: 0.2496522, C25: 0.1915023, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -4.409382
  },
  SDI_10_MALE_HF: {
    C0: 0.894179, C1: 0, C2: 0, C3: 0, C4: -0.7067398, C5: 0.350241,
    C6: 0.9252453, C7: 0.4364765, C8: -0.0866297, C9: 0.3706765, C10: 0.6696768, C11: 0.0237374,
    C12: 0.2688352, C13: 0, C14: -0.0434892, C15: 0, C16: 0, C17: 0,
    C18: -0.1297155, C19: -0.299086, C20: -0.1079522, C21: 0.0130483, C22: -0.1797791, C23: 0.1235632,
    C24: 0.3592212, C25: 0.17924, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -4.058977
  },

  // Add essential missing coefficient sets for proper functionality
  
  // 10-year BASE MODEL coefficients - Official AHA PREVENT 2023 (no novel factors)
  BASE_10_FEMALE_ASCVD: {
    C0: 0.719883, C1: 0, C2: 0.1176967, C3: -0.151185, C4: -0.0835358, C5: 0.3592852,
    C6: 0.8348585, C7: 0.4831078, C8: 0, C9: 0, C10: 0.4864619, C11: 0.0397779,
    C12: 0.2265309, C13: -0.0592374, C14: -0.0395762, C15: 0.0844423, C16: -0.0567839, C17: 0.0325692,
    C18: -0.1035985, C19: -0.2417542, C20: -0.0791142, C21: 0, C22: -0.1671492, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.819975
  },
  BASE_10_MALE_ASCVD: {
    C0: 0.7099847, C1: 0, C2: 0.1658663, C3: -0.1144285, C4: -0.2837212, C5: 0.3239977,
    C6: 0.7189597, C7: 0.3956973, C8: 0, C9: 0, C10: 0.3690075, C11: 0.0203619,
    C12: 0.2036522, C13: -0.0865581, C14: -0.0322916, C15: 0.114563, C16: -0.0300005, C17: 0.0232747,
    C18: -0.0927024, C19: -0.2018525, C20: -0.0970527, C21: 0, C22: -0.1217081, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.500655
  },
  BASE_10_FEMALE_HF: {
    C0: 0.8998235, C1: 0, C2: 0, C3: 0, C4: -0.4559771, C5: 0.3576505,
    C6: 1.038346, C7: 0.583916, C8: -0.0072294, C9: 0.2997706, C10: 0.7451638, C11: 0.0557087,
    C12: 0.3534442, C13: 0, C14: -0.0981511, C15: 0, C16: 0, C17: 0,
    C18: -0.0946663, C19: -0.3581041, C20: -0.1159453, C21: -0.003878, C22: -0.1884289, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -4.310409
  },
  BASE_10_MALE_HF: {
    C0: 0.8972642, C1: 0, C2: 0, C3: 0, C4: -0.6811466, C5: 0.3634461,
    C6: 0.923776, C7: 0.5023736, C8: -0.0485841, C9: 0.3726929, C10: 0.6926917, C11: 0.0251827,
    C12: 0.2980922, C13: 0, C14: -0.0497731, C15: 0, C16: 0, C17: 0,
    C18: -0.1289201, C19: -0.3040924, C20: -0.1401688, C21: 0.0068126, C22: -0.1797778, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -3.946391
  },

  // 30-year BASE MODEL coefficients - Official AHA PREVENT 2023 (no novel factors)
  BASE_30_FEMALE_TOTAL_CVD: {
    C0: 0.5503079, C1: -0.0928369, C2: 0.0409794, C3: -0.1663306, C4: -0.1628654, C5: 0.3299505,
    C6: 0.6793894, C7: 0.3196112, C8: 0, C9: 0, C10: 0.1857101, C11: 0.0553528,
    C12: 0.2894, C13: -0.075688, C14: -0.056367, C15: 0.1071019, C16: -0.0751438, C17: 0.0301786,
    C18: -0.0998776, C19: -0.3206166, C20: -0.1607862, C21: 0, C22: -0.1450788, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.318827
  },
  BASE_30_MALE_TOTAL_CVD: {
    C0: 0.4627309, C1: -0.0984281, C2: 0.0836088, C3: -0.1029824, C4: -0.2140352, C5: 0.2904325,
    C6: 0.5331276, C7: 0.2141914, C8: 0, C9: 0, C10: 0.1155556, C11: 0.0603775,
    C12: 0.232714, C13: -0.0272112, C14: -0.0384488, C15: 0.134192, C16: -0.0511759, C17: 0.0165865,
    C18: -0.1101437, C19: -0.2585943, C20: -0.1566406, C21: 0, C22: -0.1166776, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.148204
  },
  BASE_30_FEMALE_ASCVD: {
    C0: 0.4669202, C1: -0.0893118, C2: 0.1256901, C3: -0.1542255, C4: -0.0018093, C5: 0.322949,
    C6: 0.6296707, C7: 0.268292, C8: 0, C9: 0, C10: 0.100106, C11: 0.0499663,
    C12: 0.1875292, C13: 0.0152476, C14: -0.0276123, C15: 0.0736147, C16: -0.0521962, C17: 0.0316918,
    C18: -0.1046101, C19: -0.2727793, C20: -0.1530907, C21: 0, C22: -0.1299149, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.974074
  },
  BASE_30_MALE_ASCVD: {
    C0: 0.3994099, C1: -0.0937484, C2: 0.1744643, C3: -0.120203, C4: -0.0665117, C5: 0.2753037,
    C6: 0.4790257, C7: 0.1782635, C8: 0, C9: 0, C10: -0.0218789, C11: 0.0602553,
    C12: 0.1421182, C13: 0.0135996, C14: -0.0218265, C15: 0.1013148, C16: -0.0312619, C17: 0.020673,
    C18: -0.0920935, C19: -0.2159947, C20: -0.1548811, C21: 0, C22: -0.0712547, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.736444
  },
  BASE_30_FEMALE_HF: {
    C0: 0.6254374, C1: -0.0983038, C2: 0, C3: 0, C4: -0.3919241, C5: 0.3142295,
    C6: 0.8330787, C7: 0.3438651, C8: 0.0594874, C9: 0.2525536, C10: 0.2981642, C11: 0.0667159,
    C12: 0.333921, C13: 0, C14: -0.0893177, C15: 0, C16: 0, C17: 0,
    C18: -0.0974299, C19: -0.404855, C20: -0.1982991, C21: -0.0035619, C22: -0.1564215, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -2.205379
  },
  BASE_30_MALE_HF: {
    C0: 0.5681541, C1: -0.1048388, C2: 0, C3: 0, C4: -0.4761564, C5: 0.30324,
    C6: 0.6840338, C7: 0.2656273, C8: 0.0833107, C9: 0.26999, C10: 0.2541805, C11: 0.0638923,
    C12: 0.2583631, C13: 0, C14: -0.0391938, C15: 0, C16: 0, C17: 0,
    C18: -0.1269124, C19: -0.3273572, C20: -0.2043019, C21: -0.0182831, C22: -0.1342618, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.95751
  },

  // 30-year HbA1C MODEL coefficients
  HBA1C_30_FEMALE_TOTAL_CVD: {
    C0: 0.5343493, C1: -0.0952314, C2: 0.0298124, C3: -0.1578451, C4: -0.1504488, C5: 0.3173368,
    C6: 0.4314738, C7: 0.3209399, C8: 0, C9: 0, C10: 0.1771435, C11: 0.0582828,
    C12: 0.2888947, C13: -0.0795886, C14: -0.0600438, C15: 0.0920598, C16: -0.0696108, C17: 0.0308807,
    C18: -0.0954051, C19: -0.2763408, C20: -0.1623944, C21: 0, C22: -0.1430514, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.0940543, C29: 0.1116486, C30: -0.0024798, C31: -1.341059
  },
  HBA1C_30_MALE_TOTAL_CVD: {
    C0: 0.4519873, C1: -0.101624, C2: 0.0700456, C3: -0.0968005, C4: -0.1923527, C5: 0.2827043,
    C6: 0.3417152, C7: 0.2105272, C8: 0, C9: 0, C10: 0.1113291, C11: 0.0640135,
    C12: 0.2334248, C13: -0.0299421, C14: -0.0393204, C15: 0.1228854, C16: -0.0463737, C17: 0.0184599,
    C18: -0.1085744, C19: -0.2208049, C20: -0.1577978, C21: 0, C22: -0.1179375, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.0768169, C29: 0.0777295, C30: 0.0092204, C31: -1.180767
  },
  HBA1C_30_FEMALE_ASCVD: {
    C0: 0.4555574, C1: -0.0903501, C2: 0.1148321, C3: -0.1458754, C4: 0.0089323, C5: 0.3139029,
    C6: 0.386281, C7: 0.2714309, C8: 0, C9: 0, C10: 0.0930987, C11: 0.0532216,
    C12: 0.1862181, C13: 0.0106964, C14: -0.0329713, C15: 0.0583609, C16: -0.0463273, C17: 0.0324717,
    C18: -0.1004777, C19: -0.2266944, C20: -0.1541859, C21: 0, C22: -0.1286005, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.0875827, C29: 0.1126417, C30: 0.0124356, C31: -2.011533
  },
  HBA1C_30_MALE_ASCVD: {
    C0: 0.3883267, C1: -0.0958114, C2: 0.1613374, C3: -0.1144418, C4: -0.0474338, C5: 0.2691281,
    C6: 0.2859773, C7: 0.1759553, C8: 0, C9: 0, C10: -0.0242898, C11: 0.0644523,
    C12: 0.142874, C13: 0.0115062, C14: -0.02333, C15: 0.0899664, C16: -0.0275478, C17: 0.022573,
    C18: -0.090802, C19: -0.1771894, C20: -0.1548847, C21: 0, C22: -0.0732754, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.0591089, C29: 0.0821158, C30: 0.0179755, C31: -1.777708
  },
  HBA1C_30_FEMALE_HF: {
    C0: 0.6210856, C1: -0.1000972, C2: 0, C3: 0, C4: -0.3773697, C5: 0.295316,
    C6: 0.5681692, C7: 0.3449139, C8: 0.0540094, C9: 0.249767, C10: 0.2875781, C11: 0.0692013,
    C12: 0.3334936, C13: 0, C14: -0.0922339, C15: 0, C16: 0, C17: 0,
    C18: -0.0907885, C19: -0.3554646, C20: -0.2008846, C21: -0.0079611, C22: -0.156803, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1448336, C29: 0.1277838, C30: -0.0022589, C31: -2.193553
  },
  HBA1C_30_MALE_HF: {
    C0: 0.5703729, C1: -0.1084544, C2: 0, C3: 0, C4: -0.4471767, C5: 0.2910152,
    C6: 0.4507242, C7: 0.259585, C8: 0.0850676, C9: 0.2637222, C10: 0.2454706, C11: 0.0675649,
    C12: 0.2611991, C13: 0, C14: -0.0408908, C15: 0, C16: 0, C17: 0,
    C18: -0.1241051, C19: -0.2849461, C20: -0.2032308, C21: -0.0239714, C22: -0.138301, C23: 0,
    C24: 0, C25: 0, C26: 0, C27: 0, C28: 0.1101184, C29: 0.0949198, C30: 0.0084192, C31: -1.974999
  },

  // 30-year UACR MODEL coefficients
  UACR_30_FEMALE_TOTAL_CVD: {
    C0: 0.5491768, C1: -0.0937311, C2: 0.0359847, C3: -0.1642965, C4: -0.1483404, C5: 0.313353,
    C6: 0.6253766, C7: 0.3147172, C8: 0, C9: 0, C10: 0.1094663, C11: 0.0550705,
    C12: 0.2782433, C13: -0.0786239, C14: -0.0628947, C15: 0.093204, C16: -0.0710685, C17: 0.0306363,
    C18: -0.0951455, C19: -0.3168231, C20: -0.1636391, C21: 0, C22: -0.1265483, C23: 0,
    C24: 0, C25: 0, C26: 0.1142251, C27: -0.0055863, C28: 0, C29: 0, C30: 0, C31: -1.583738
  },
  UACR_30_MALE_TOTAL_CVD: {
    C0: 0.464491, C1: -0.0998895, C2: 0.0757606, C3: -0.1031778, C4: -0.1990714, C5: 0.2715816,
    C6: 0.4754637, C7: 0.2069672, C8: 0, C9: 0, C10: 0.0331103, C11: 0.0540474,
    C12: 0.2189911, C13: -0.0331044, C14: -0.04534, C15: 0.1214535, C16: -0.0483995, C17: 0.0178997,
    C18: -0.1059324, C19: -0.2492861, C20: -0.1561543, C21: 0, C22: -0.1012429, C23: 0,
    C24: 0, C25: 0, C26: 0.1007571, C27: 0.0572456, C28: 0, C29: 0, C30: 0, C31: -1.398727
  },
  UACR_30_FEMALE_ASCVD: {
    C0: 0.4629669, C1: -0.0902777, C2: 0.1215214, C3: -0.1522069, C4: 0.0092679, C5: 0.3113609,
    C6: 0.581256, C7: 0.263167, C8: 0, C9: 0, C10: 0.0391726, C11: 0.0492959,
    C12: 0.1786178, C13: 0.0131058, C14: -0.0325135, C15: 0.0617093, C16: -0.0489189, C17: 0.0321079,
    C18: -0.1003185, C19: -0.2684574, C20: -0.1547301, C21: 0, C22: -0.1130703, C23: 0,
    C24: 0, C25: 0, C26: 0.0903471, C27: -0.0145818, C28: 0, C29: 0, C30: 0, C31: -2.178888
  },
  UACR_30_MALE_ASCVD: {
    C0: 0.3995607, C1: -0.094557, C2: 0.1686692, C3: -0.1202145, C4: -0.0555561, C5: 0.2633566,
    C6: 0.4362036, C7: 0.1716233, C8: 0, C9: 0, C10: -0.0775282, C11: 0.0561236,
    C12: 0.1319331, C13: 0.0102428, C14: -0.0269294, C15: 0.0920557, C16: -0.0297021, C17: 0.0217935,
    C18: -0.0893347, C19: -0.2081467, C20: -0.1542716, C21: 0, C22: -0.0597254, C23: 0,
    C24: 0, C25: 0, C26: 0.0684872, C27: 0.0193962, C28: 0, C29: 0, C30: 0, C31: -1.873449
  },
  UACR_30_FEMALE_HF: {
    C0: 0.6319513, C1: -0.1009284, C2: 0, C3: 0, C4: -0.3787175, C5: 0.2863393,
    C6: 0.7631221, C7: 0.3355843, C8: 0.0677084, C9: 0.2517238, C10: 0.1940067, C11: 0.0664006,
    C12: 0.3171436, C13: 0, C14: -0.0970661, C15: 0, C16: 0, C17: 0,
    C18: -0.0896239, C19: -0.400743, C20: -0.2042041, C21: -0.0054699, C22: -0.13602, C23: 0,
    C24: 0, C25: 0, C26: 0.1486028, C27: 0.011608, C28: 0, C29: 0, C30: 0, C31: -2.538952
  },
  UACR_30_MALE_HF: {
    C0: 0.5750236, C1: -0.1062268, C2: 0, C3: 0, C4: -0.4633994, C5: 0.2742874,
    C6: 0.612208, C7: 0.2614987, C8: 0.0895459, C9: 0.2632424, C10: 0.1430472, C11: 0.0535184,
    C12: 0.0535184, C13: 0, C14: -0.0498574, C15: 0, C16: 0, C17: 0,
    C18: -0.1193827, C19: -0.316651, C20: -0.2046122, C21: -0.0216878, C22: -0.1165637, C23: 0,
    C24: 0, C25: 0, C26: 0.1366452, C27: 0.1078355, C28: 0, C29: 0, C30: 0, C31: -2.314872
  },

  // 30-year SDI MODEL coefficients
  SDI_30_FEMALE_TOTAL_CVD: {
    C0: 0.5124233, C1: -0.0978159, C2: 0.0322131, C3: -0.1717884, C4: -0.1364536, C5: 0.3074443,
    C6: 0.6709275, C7: 0.2897728, C8: 0, C9: 0, C10: 0.1670658, C11: 0.0618439,
    C12: 0.2969806, C13: -0.0665514, C14: -0.0458917, C15: 0.1168505, C16: -0.0770419, C17: 0.027634,
    C18: -0.0992045, C19: -0.3208137, C20: -0.134847, C21: 0, C22: -0.1399842, C23: 0.1129725,
    C24: 0.1975843, C25: 0.1627381, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.493211
  },
  SDI_30_MALE_TOTAL_CVD: {
    C0: 0.437377, C1: -0.104443, C2: 0.0812573, C3: -0.1069199, C4: -0.2786727, C5: 0.2729256,
    C6: 0.5279006, C7: 0.1878949, C8: 0, C9: 0, C10: 0.0866569, C11: 0.0594948,
    C12: 0.2028246, C13: -0.0308404, C14: -0.0283679, C15: 0.1439353, C16: -0.0510854, C17: 0.0150236,
    C18: -0.1095448, C19: -0.2561109, C20: -0.1282945, C21: 0, C22: -0.1011023, C23: 0.0314626,
    C24: 0.2003953, C25: 0.0927451, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.251031
  },
  SDI_30_FEMALE_ASCVD: {
    C0: 0.4396545, C1: -0.0918489, C2: 0.1132729, C3: -0.1544977, C4: 0.036315, C5: 0.3049229,
    C6: 0.6344794, C7: 0.234514, C8: 0, C9: 0, C10: 0.0898312, C11: 0.0564502,
    C12: 0.1933487, C13: 0.0220467, C14: -0.0229229, C15: 0.0903326, C16: -0.0579383, C17: 0.0274011,
    C18: -0.1039749, C19: -0.2785102, C20: -0.1167267, C21: 0, C22: -0.1269382, C23: 0.1149139,
    C24: 0.1976537, C25: 0.1391241, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -2.116951
  },
  SDI_30_MALE_ASCVD: {
    C0: 0.3749788, C1: -0.0990063, C2: 0.1708505, C3: -0.1272841, C4: -0.1275555, C5: 0.2659339,
    C6: 0.4676531, C7: 0.1610104, C8: 0, C9: 0, C10: -0.0465144, C11: 0.0596996,
    C12: 0.1147096, C13: 0.0052906, C14: -0.0186687, C15: 0.1063151, C16: -0.0307797, C17: 0.0218126,
    C18: -0.0898242, C19: -0.210054, C20: -0.1246327, C21: 0, C22: -0.0629358, C23: 0.0199201,
    C24: 0.194949, C25: 0.0863835, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -1.836632
  },
  SDI_30_FEMALE_HF: {
    C0: 0.5919097, C1: -0.1023133, C2: 0, C3: 0, C4: -0.3864727, C5: 0.301876,
    C6: 0.8162909, C7: 0.3449647, C8: 0.0574975, C9: 0.2367826, C10: 0.2790347, C11: 0.0742645,
    C12: 0.3352935, C13: 0, C14: -0.0772532, C15: 0, C16: 0, C17: 0,
    C18: -0.0995144, C19: -0.4000423, C20: -0.1770335, C21: 0.0083046, C22: -0.149585, C23: 0.0960646,
    C24: 0.1987543, C25: 0.1562214, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -2.317899
  },
  SDI_30_MALE_HF: {
    C0: 0.5387527, C1: -0.1090333, C2: 0, C3: 0, C4: -0.4829094, C5: 0.2843569,
    C6: 0.6827667, C7: 0.2406677, C8: 0.0618028, C9: 0.2705615, C10: 0.2255837, C11: 0.0653632,
    C12: 0.2263243, C13: 0, C14: -0.0316851, C15: 0, C16: 0, C17: 0,
    C18: -0.1258716, C19: -0.3243709, C20: -0.1596172, C21: -0.0103092, C22: -0.1204785, C23: 0.0680528,
    C24: 0.2619865, C25: 0.1151424, C26: 0, C27: 0, C28: 0, C29: 0, C30: 0, C31: -2.060187
  }
};

// Enhanced Risk Visualization Component
const RiskVisualizationChart: React.FC<{
  patientAge: number;
  sex: 'male' | 'female';
  formData: PREVENTFormData;
  currentRisk: {
    totalCVD: number;
    ascvd: number;
    heartFailure: number;
  };
  timeframe: '10' | '30';
}> = ({ patientAge, sex, formData, currentRisk, timeframe }) => {
  const { t } = useTranslation();
  const [hoveredPoint, setHoveredPoint] = useState<{ age: number; risks: { totalCVD: number; ascvd: number; heartFailure: number; } } | null>(null);
  const [animationComplete, setAnimationComplete] = useState(false);

  // Generate risk data for different ages
  const generateRiskData = () => {
    const ageRange = timeframe === '10' ? 
      Array.from({ length: 51 }, (_, i) => i + 30) : // 30-80 for 10-year
      Array.from({ length: 31 }, (_, i) => i + 30);   // 30-60 for 30-year
    
    return ageRange.map(age => {
      // Calculate risks for this age while keeping other factors constant
      const tempFormData = { ...formData, age: age.toString() };
      const risks = calculateRiskForAge(tempFormData, timeframe);
      return {
        age,
        totalCVD: Math.max(0, Math.min(100, risks.totalCVD)),
        ascvd: Math.max(0, Math.min(100, risks.ascvd)),
        heartFailure: Math.max(0, Math.min(100, risks.heartFailure))
      };
    });
  };

  // Calculate risk for different ages using age-based scaling
  const calculateRiskForAge = (tempFormData: PREVENTFormData, timeframe: string) => {
    const age = parseInt(tempFormData.age);
    const currentAge = parseInt(formData.age);
    
    // Age-based risk scaling using exponential model
    // PREVENT shows approximately 50-60% increase per decade
    const ageCoeff = timeframe === '10' ? 0.45 : 0.35; // Slightly lower for 30-year
    const currentAgeFactor = Math.exp(ageCoeff * ((currentAge - 55) / 10));
    const newAgeFactor = Math.exp(ageCoeff * ((age - 55) / 10));
    const ageRatio = newAgeFactor / currentAgeFactor;
    
    // Apply realistic bounds and age scaling
    const totalCVD = Math.max(0.1, Math.min(85, currentRisk.totalCVD * ageRatio));
    const ascvd = Math.max(0.1, Math.min(70, currentRisk.ascvd * ageRatio));
    const heartFailure = Math.max(0.1, Math.min(50, currentRisk.heartFailure * ageRatio));
    
    return { totalCVD, ascvd, heartFailure };
  };

  const data = generateRiskData();
  const maxRisk = Math.max(...data.flatMap(d => [d.totalCVD, d.ascvd, d.heartFailure]));
  const yAxisMax = Math.min(100, Math.ceil(maxRisk / 10) * 10);

  // Chart dimensions
  const chartWidth = 800;
  const chartHeight = 400;
  const margin = { top: 20, right: 60, bottom: 60, left: 60 };
  const plotWidth = chartWidth - margin.left - margin.right;
  const plotHeight = chartHeight - margin.top - margin.bottom;

  // Scales
  const ageRange = timeframe === '10' ? [30, 80] : [30, 60];
  const xScale = (age: number) => ((age - ageRange[0]) / (ageRange[1] - ageRange[0])) * plotWidth;
  const yScale = (risk: number) => plotHeight - (risk / yAxisMax) * plotHeight;

  // Generate path data for smooth curves
  const generatePath = (dataKey: 'totalCVD' | 'ascvd' | 'heartFailure') => {
    const points = data.map(d => `${xScale(d.age)},${yScale(d[dataKey])}`);
    return `M ${points.join(' L ')}`;
  };

  // Chart configuration
  const chartLines = [
    {
      key: 'totalCVD' as const,
      color: '#3B82F6',
      gradient: 'from-blue-500 to-blue-600',
      label: t('calculators.cardiology.prevent.total_cvd'),
      value: currentRisk.totalCVD
    },
    {
      key: 'ascvd' as const,
      color: '#F59E0B',
      gradient: 'from-amber-500 to-orange-600',
      label: t('calculators.cardiology.prevent.ascvd'),
      value: currentRisk.ascvd
    },
    {
      key: 'heartFailure' as const,
      color: '#10B981',
      gradient: 'from-emerald-500 to-green-600',
      label: t('calculators.cardiology.prevent.heart_failure'),
      value: currentRisk.heartFailure
    }
  ];

  React.useEffect(() => {
    const timer = setTimeout(() => setAnimationComplete(true), 1000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="bg-gradient-to-br from-white/90 via-blue-50/80 to-indigo-50/90 dark:from-gray-900/90 dark:via-blue-950/80 dark:to-indigo-950/90 backdrop-blur-xl rounded-3xl border border-white/20 dark:border-gray-800/20 shadow-2xl p-8">
      {/* Chart Header */}
      <div className="text-center mb-8">
        <div className="inline-flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-2xl shadow-xl mb-4">
          <BarChart3 className="w-6 h-6" />
          <span className="font-bold text-lg">
            {timeframe === '10' ? 
              t('calculators.cardiology.prevent.ten_year_risk_estimates') : 
              t('calculators.cardiology.prevent.thirty_year_risk_estimates')
            }
          </span>
        </div>
        <p className="text-gray-600 dark:text-gray-400">
          {t('calculators.cardiology.prevent.risk_by_age_description')}
        </p>
      </div>

      {/* Interactive Chart */}
      <div className="relative">
        <svg 
          width={chartWidth} 
          height={chartHeight} 
          className="w-full h-auto max-w-full"
          viewBox={`0 0 ${chartWidth} ${chartHeight}`}
        >
          {/* Gradient Definitions */}
          <defs>
            {chartLines.map(line => (
              <linearGradient key={line.key} id={`gradient-${line.key}`} x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" stopColor={line.color} stopOpacity="0.3" />
                <stop offset="100%" stopColor={line.color} stopOpacity="0.1" />
              </linearGradient>
            ))}
            
            {/* Glow filter */}
            <filter id="glow">
              <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
              <feMerge> 
                <feMergeNode in="coloredBlur"/>
                <feMergeNode in="SourceGraphic"/>
              </feMerge>
            </filter>
          </defs>

          {/* Chart Background */}
          <rect 
            x={margin.left} 
            y={margin.top} 
            width={plotWidth} 
            height={plotHeight} 
            fill="rgba(255,255,255,0.1)" 
            rx="12" 
            className="backdrop-blur-sm"
          />

          {/* Grid Lines */}
          {/* Y-axis grid */}
          {Array.from({ length: 6 }, (_, i) => {
            const y = margin.top + (plotHeight / 5) * i;
            const riskValue = yAxisMax - (yAxisMax / 5) * i;
            return (
              <g key={`y-grid-${i}`}>
                <line
                  x1={margin.left}
                  y1={y}
                  x2={margin.left + plotWidth}
                  y2={y}
                  stroke="rgba(156, 163, 175, 0.3)"
                  strokeWidth="1"
                  strokeDasharray="4,4"
                />
                <text
                  x={margin.left - 10}
                  y={y + 5}
                  textAnchor="end"
                  className="text-xs fill-gray-600 dark:fill-gray-400"
                >
                  {Math.round(riskValue)}%
                </text>
              </g>
            );
          })}

          {/* X-axis grid */}
          {Array.from({ length: timeframe === '10' ? 6 : 4 }, (_, i) => {
            const step = timeframe === '10' ? 10 : 10;
            const ageValue = ageRange[0] + step * i;
            const x = margin.left + xScale(ageValue);
            return (
              <g key={`x-grid-${i}`}>
                <line
                  x1={x}
                  y1={margin.top}
                  x2={x}
                  y2={margin.top + plotHeight}
                  stroke="rgba(156, 163, 175, 0.3)"
                  strokeWidth="1"
                  strokeDasharray="4,4"
                />
                <text
                  x={x}
                  y={margin.top + plotHeight + 25}
                  textAnchor="middle"
                  className="text-xs fill-gray-600 dark:fill-gray-400"
                >
                  {ageValue}
                </text>
              </g>
            );
          })}

          {/* Risk Curves with Areas */}
          {chartLines.map((line, index) => {
            const path = generatePath(line.key);
            const areaPath = `${path} L ${margin.left + xScale(data[data.length - 1].age)},${margin.top + plotHeight} L ${margin.left + xScale(data[0].age)},${margin.top + plotHeight} Z`;
            
            return (
              <g key={line.key}>
                {/* Area under curve */}
                <path
                  d={areaPath}
                  fill={`url(#gradient-${line.key})`}
                  opacity="0.6"
                  className="transition-all duration-1000"
                  style={{
                    transform: animationComplete ? 'scaleY(1)' : 'scaleY(0)',
                    transformOrigin: 'bottom',
                    transitionDelay: `${index * 200}ms`
                  }}
                />
                
                {/* Main curve line */}
                <path
                  d={path}
                  stroke={line.color}
                  strokeWidth="3"
                  fill="none"
                  filter="url(#glow)"
                  className="transition-all duration-1000"
                  strokeDasharray={animationComplete ? "0" : `${plotWidth * 2}`}
                  strokeDashoffset={animationComplete ? "0" : `${plotWidth * 2}`}
                  style={{
                    transitionDelay: `${index * 200}ms`
                  }}
                />

                {/* Patient age indicator */}
                <circle
                  cx={margin.left + xScale(patientAge)}
                  cy={margin.top + yScale(line.value)}
                  r="6"
                  fill={line.color}
                  stroke="white"
                  strokeWidth="2"
                  className="transition-all duration-500 hover:r-8"
                  style={{
                    opacity: animationComplete ? 1 : 0,
                    transitionDelay: `${800 + index * 100}ms`
                  }}
                />
                
                {/* Patient age label */}
                <text
                  x={margin.left + xScale(patientAge)}
                  y={margin.top + yScale(line.value) - 15}
                  textAnchor="middle"
                  className="text-xs font-bold"
                  fill={line.color}
                  style={{
                    opacity: animationComplete ? 1 : 0,
                    transitionDelay: `${800 + index * 100}ms`
                  }}
                >
                  {line.value.toFixed(1)}%
                </text>
              </g>
            );
          })}

          {/* Patient age vertical line */}
          <line
            x1={margin.left + xScale(patientAge)}
            y1={margin.top}
            x2={margin.left + xScale(patientAge)}
            y2={margin.top + plotHeight}
            stroke="rgba(59, 130, 246, 0.5)"
            strokeWidth="2"
            strokeDasharray="8,4"
            className="transition-all duration-500"
            style={{
              opacity: animationComplete ? 1 : 0,
              transitionDelay: '800ms'
            }}
          />

          {/* Axis Labels */}
          <text
            x={margin.left + plotWidth / 2}
            y={chartHeight - 15}
            textAnchor="middle"
            className="text-sm font-semibold fill-gray-700 dark:fill-gray-300"
          >
            {t('calculators.cardiology.prevent.age_years')}
          </text>
          
          <text
            x={25}
            y={margin.top + plotHeight / 2}
            textAnchor="middle"
            className="text-sm font-semibold fill-gray-700 dark:fill-gray-300"
            transform={`rotate(-90, 25, ${margin.top + plotHeight / 2})`}
          >
            {t('calculators.cardiology.prevent.risk_percentage')}
          </text>

          {/* Interactive hover area */}
          <rect
            x={margin.left}
            y={margin.top}
            width={plotWidth}
            height={plotHeight}
            fill="transparent"
            onMouseMove={(E) => {
              const rect = e.currentTarget.getBoundingClientRect();
              const x = e.clientX - rect.left - margin.left;
              const age = Math.round(ageRange[0] + (x / plotWidth) * (ageRange[1] - ageRange[0]));
              const risks = data.find(d => d.age === age);
              if (risks) {
                setHoveredPoint({ age, risks });
              }
            }}
            onMouseLeave={() => setHoveredPoint(null)}
          />
        </svg>

        {/* Tooltip */}
        {hoveredPoint && (
          <div 
            className="absolute bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-4 border border-gray-200 dark:border-gray-700 z-10 pointer-events-none transition-all duration-200"
            style={{
              left: `${((hoveredPoint.age - ageRange[0]) / (ageRange[1] - ageRange[0])) * 100}%`,
              top: '20px',
              transform: 'translateX(-50%)'
            }}
          >
            <div className="text-sm font-bold text-gray-900 dark:text-gray-100 mb-2">
              {t('calculators.cardiology.prevent.age')}: {hoveredPoint.age} {t('calculators.cardiology.prevent.years')}
            </div>
            {chartLines.map(line => (
              <div key={line.key} className="flex items-center justify-between space-x-4 mb-1">
                <div className="flex items-center space-x-2">
                  <div 
                    className="w-3 h-3 rounded-full" 
                    style={{ backgroundColor: line.color }}
                  ></div>
                  <span className="text-xs text-gray-700 dark:text-gray-300">{line.label}</span>
                </div>
                <span className="text-xs font-bold text-gray-900 dark:text-gray-100">
                  {hoveredPoint.risks[line.key].toFixed(1)}%
                </span>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Legend */}
      <div className="flex flex-wrap justify-center items-center mt-8 space-x-8">
        {chartLines.map(line => (
          <div key={line.key} className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <div 
                className="w-4 h-4 rounded-full shadow-lg"
                style={{ backgroundColor: line.color }}
              ></div>
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                {line.label}
              </span>
            </div>
            <div className="px-3 py-1 bg-white/60 dark:bg-gray-800/60 rounded-lg border border-white/50 dark:border-gray-700/50">
              <span className="text-sm font-bold" style={{ color: line.color }}>
                {line.value.toFixed(1)}%
              </span>
            </div>
          </div>
        ))}
      </div>

      {/* Chart Insights */}
      <div className="mt-8 p-6 bg-gradient-to-r from-blue-50/80 to-indigo-50/80 dark:from-blue-950/40 dark:to-indigo-950/40 rounded-2xl border border-blue-200/50 dark:border-blue-800/50">
        <div className="flex items-center space-x-3 mb-4">
          <div className="p-2 bg-blue-500/20 rounded-lg">
            <TrendingUp className="w-5 h-5 text-blue-600" />
          </div>
          <h4 className="font-bold text-blue-800 dark:text-blue-300">
            {t('calculators.cardiology.prevent.risk_insights')}
          </h4>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-4 sm:gap-6">
          <div className="text-center p-3 bg-white/60 dark:bg-gray-800/60 rounded-lg">
            <div className="text-lg font-bold text-blue-600 mb-1">{patientAge}</div>
            <div className="text-xs text-gray-600 dark:text-gray-400">
              {t('calculators.cardiology.prevent.current_age')}
            </div>
          </div>
          <div className="text-center p-3 bg-white/60 dark:bg-gray-800/60 rounded-lg">
            <div className="text-lg font-bold text-green-600 mb-1">
              {chartLines.find(l => l.key === 'totalCVD')?.value.toFixed(1)}%
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">
              {timeframe}-{t('calculators.cardiology.prevent.year_total_risk')}
            </div>
          </div>
          <div className="text-center p-3 bg-white/60 dark:bg-gray-800/60 rounded-lg">
            <div className="text-lg font-bold text-amber-600 mb-1">
              {timeframe === '10' ? '2x' : '3x'}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">
              {t('calculators.cardiology.prevent.risk_increase_decade')}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Premium color system
const RISK_COLORS = {
  low: {
    color: 'text-emerald-700 dark:text-emerald-300',
    bg: 'bg-emerald-100 dark:bg-emerald-900/30',
    border: 'border-emerald-200 dark:border-emerald-800',
    gradient: 'from-emerald-500 to-green-500'
  },
  borderline: {
    color: 'text-yellow-700 dark:text-yellow-300',
    bg: 'bg-yellow-100 dark:bg-yellow-900/30',
    border: 'border-yellow-200 dark:border-yellow-800',
    gradient: 'from-yellow-500 to-amber-500'
  },
  intermediate: {
    color: 'text-orange-700 dark:text-orange-300',
    bg: 'bg-orange-100 dark:bg-orange-900/30',
    border: 'border-orange-200 dark:border-orange-800',
    gradient: 'from-orange-500 to-red-500'
  },
  high: {
    color: 'text-red-700 dark:text-red-300',
    bg: 'bg-red-100 dark:bg-red-900/30',
    border: 'border-red-200 dark:border-red-800',
    gradient: 'from-red-500 to-rose-500'
  }
};

// Sophisticated component for enhanced user experience
const PREVENTCalculator: React.FC = () => {
  const { t } = useTranslation();
  
  // Sophisticated step configuration for premium UX
  const STEP_CONFIG: StepConfig[] = [
    {
      id: 1,
      title: t('calculators.cardiology.prevent.step_1_title'),
      description: t('calculators.cardiology.prevent.step_1_description'),
      icon: User,
      color: 'from-blue-500 to-cyan-500',
      gradient: 'bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20'
    },
    {
      id: 2,
      title: t('calculators.cardiology.prevent.step_2_title'),
      description: t('calculators.cardiology.prevent.step_2_description'),
      icon: Activity,
      color: 'from-emerald-500 to-teal-500',
      gradient: 'bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-900/20 dark:to-teal-900/20'
    },
    {
      id: 3,
      title: t('calculators.cardiology.prevent.step_3_title'),
      description: t('calculators.cardiology.prevent.step_3_description'),
      icon: Stethoscope,
      color: 'from-purple-500 to-indigo-500',
      gradient: 'bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20'
    },
    {
      id: 4,
      title: t('calculators.cardiology.prevent.step_4_title'),
      description: t('calculators.cardiology.prevent.step_4_description'),
      icon: Brain,
      color: 'from-amber-500 to-orange-500',
      gradient: 'bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20'
    },
    {
      id: 5,
      title: t('calculators.cardiology.prevent.step_5_title'),
      description: t('calculators.cardiology.prevent.step_5_description'),
      icon: Target,
      color: 'from-red-500 to-pink-500',
      gradient: 'bg-gradient-to-br from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20'
    }
  ];
  
  // State management with enhanced UX
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<PREVENTFormData>({
    age: '',
    sex: '',
    height: '',
    weight: '',
    totalCholesterol: '',
    hdlCholesterol: '',
    systolicBP: '',
    serumCreatinine: '',
    onHypertensionMeds: false,
    onStatin: false,
    diabetes: false,
    currentSmoker: false,
    hba1c: '',
    uacr: '',
  });
  
  const [errors, setErrors] = useState<FormErrors>({});
  const [isCalculating, setIsCalculating] = useState(false);
  const [results, setResults] = useState<PREVENTResult | null>(null);
  const [showResults, setShowResults] = useState(false);
  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());
  
  // Auto-save functionality for premium UX
  useEffect(() => {
    const savedData = localStorage.getItem('prevent_calculator_data');
    if (savedData) {
      const [parsed, error] = safe(() => {
        return JSON.parse(savedData);
      }, {
        context: 'loading saved PREVENT calculator data',
        severity: ErrorSeverity.LOW,
        showToast: false
      });

      if (!error && parsed) {
        setFormData(parsed);
      }
    }
  }, []);
  
  useEffect(() => {
    localStorage.setItem('prevent_calculator_data', JSON.stringify(formData));
  }, [formData]);

  // Utility functions - moved before useMemo to avoid temporal dead zone
  const calculateBMI = (height: number, weight: number): number => {
    // BMI = Weight(kg) / (Height(m))^2
    const heightInMeters = height / 100;
    return weight / (heightInMeters * heightInMeters);
  };

  const calculateeGFR = (age: number, sex: string, creatinine: number): number => {
    // Using CKD-EPI equation as specified in PREVENT
    const isFemale = sex === 'female';
    const kappa = isFemale ? 0.7 : 0.9;
    const alpha = isFemale ? -0.241 : -0.302;
    const sexFactor = isFemale ? 1.012 : 1;
    
    const term1 = 142;
    const term2 = Math.min(creatinine / kappa, 1) ** alpha;
    const term3 = Math.max(creatinine / kappa, 1) ** (-1.2);
    const term4 = 0.9938 ** age;
    
    return term1 * term2 * term3 * term4 * sexFactor;
  };

  // Real-time calculations for preview
  const realTimeCalculations = useMemo(() => {
    const height = parseFloat(formData.height);
    const weight = parseFloat(formData.weight);
    const age = parseFloat(formData.age);
    const creatinine = parseFloat(formData.serumCreatinine);
    
    const bmi = height && weight ? calculateBMI(height, weight) : 0;
    const eGFR = age && creatinine && formData.sex ? 
      calculateeGFR(age, formData.sex, creatinine) : 0;
    
    return { bmi: Number(bmi.toFixed(1)), eGFR: Number(eGFR.toFixed(1)) };
  }, [formData.height, formData.weight, formData.age, formData.serumCreatinine, formData.sex]);

  // Step completion validation
  const isStepComplete = useCallback((step: number): boolean => {
    switch (step) {
      case 1:
        return !!(formData.age && formData.sex && formData.height && formData.weight);
      case 2:
        return !!(formData.totalCholesterol && formData.hdlCholesterol);
      case 3:
        return !!(formData.systolicBP && formData.serumCreatinine);
      case 4:
        return true; // Optional step, always true for progression
      case 5:
        return results !== null; // Step 5 is complete when results are available
      default:
        return false;
    }
  }, [formData, results]);

  // Update completed steps
  useEffect(() => {
    const newCompletedSteps = new Set<number>();
    for (let i = 1; i <= 5; i++) {
      if (isStepComplete(i)) {
        newCompletedSteps.add(i);
      }
    }
    setCompletedSteps(newCompletedSteps);
  }, [isStepComplete]);

  // Helper function to render step icons
  const renderStepIcon = (step: StepConfig, isCompleted: boolean) => {
    if (isCompleted) {
      return <CheckCircle className="w-6 h-6" />;
    }
    
    const IconComponent = step.icon;
    return <IconComponent className="w-6 h-6" />;
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    const age = parseInt(formData.age);
    if (!formData.age || isNaN(age)) {
      newErrors.age = 'Age is required';
    } else if (age < 30 || age > 79) {
      newErrors.age = 'Age must be between 30 and 79 years';
    }

    if (!formData.sex) {
      newErrors.sex = 'Sex is required';
    }

    const height = parseFloat(formData.height);
    if (!formData.height || isNaN(height)) {
      newErrors.height = 'Height is required';
    } else if (height < 120 || height > 220) {
      newErrors.height = 'Height must be between 120-220 cm';
    }

    const weight = parseFloat(formData.weight);
    if (!formData.weight || isNaN(weight)) {
      newErrors.weight = 'Weight is required';
    } else if (weight < 30 || weight > 200) {
      newErrors.weight = 'Weight must be between 30-200 kg';
    }

    const totalChol = parseInt(formData.totalCholesterol);
    if (!formData.totalCholesterol || isNaN(totalChol)) {
      newErrors.totalCholesterol = 'Total cholesterol is required';
    } else if (totalChol < 100 || totalChol > 400) {
      newErrors.totalCholesterol = 'Total cholesterol must be between 100-400 mg/dL';
    }

    const hdlChol = parseInt(formData.hdlCholesterol);
    if (!formData.hdlCholesterol || isNaN(hdlChol)) {
      newErrors.hdlCholesterol = 'HDL cholesterol is required';
    } else if (hdlChol < 20 || hdlChol > 100) {
      newErrors.hdlCholesterol = 'HDL cholesterol must be between 20-100 mg/dL';
    }

    const systolicBP = parseInt(formData.systolicBP);
    if (!formData.systolicBP || isNaN(systolicBP)) {
      newErrors.systolicBP = 'Systolic blood pressure is required';
    } else if (systolicBP < 90 || systolicBP > 200) {
      newErrors.systolicBP = 'Systolic BP must be between 90-200 mmHg';
    }

    const creatinine = parseFloat(formData.serumCreatinine);
    if (!formData.serumCreatinine || isNaN(creatinine)) {
      newErrors.serumCreatinine = 'Serum creatinine is required';
    } else if (creatinine < 0.5 || creatinine > 5.0) {
      newErrors.serumCreatinine = 'Serum creatinine must be between 0.5-5.0 mg/dL';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const getSDIGroup = (zipCode: string): number | null => {
    // Simplified SDI mapping - in practice, this would use a lookup table
    if (!zipCode || zipCode.length !== 5) return null;
    
    // Simple mock based on zip code ranges (replace with actual SDI data)
    const zip = parseInt(zipCode);
    if (zip >= 10001 && zip <= 19999) return 1; // Lower deprivation
    if (zip >= 20000 && zip <= 49999) return 2; // Moderate deprivation
    if (zip >= 50000 && zip <= 99999) return 3; // Higher deprivation
    
    return null;
  };

  const calculatePREVENTRisk = (): PREVENTResult => {
    const age = parseInt(formData.age);
    const sex = formData.sex;
    const height = parseFloat(formData.height);
    const weight = parseFloat(formData.weight);
    const totalChol = parseInt(formData.totalCholesterol);
    const hdlChol = parseInt(formData.hdlCholesterol);
    const systolicBP = parseInt(formData.systolicBP);
    const creatinine = parseFloat(formData.serumCreatinine);
    const diabetes = formData.diabetes;
    const currentSmoker = formData.currentSmoker;
    const onHypertensionMeds = formData.onHypertensionMeds;
    const onStatin = formData.onStatin;
    const hba1c = formData.hba1c ? parseFloat(formData.hba1c) : undefined;
    const uacr = formData.uacr ? parseFloat(formData.uacr) : undefined;

    // Calculate BMI and eGFR using exact PREVENT formulas
    const bmi = calculateBMI(height, weight);
    const eGFR = calculateeGFR(age, sex, creatinine);
    
    // No SDI group as ZIP code is removed
    const sdiGroup = null;

    // Determine model type based on available novel factors
    const hasHbA1c = hba1c !== undefined;
    const hasUACR = uacr !== undefined;
    const novelFactorCount = (hasHbA1c ? 1 : 0) + (hasUACR ? 1 : 0);

    let modelType: string;
    if (novelFactorCount >= 2) {
      modelType = 'FULL';
    } else if (novelFactorCount === 1) {
      if (hasHbA1c) modelType = 'HBA1C';
      else if (hasUACR) modelType = 'UACR';
      else modelType = 'BASE';
    } else {
      modelType = 'BASE';
    }

    const calculateUACRFactor = (coeffs: Record<string, number>): number => {
      if (uacr === undefined) {
        return coeffs.C27; // Missing UACR
      }
      return Math.log(uacr) * coeffs.C26; // ln(UACR) * C26
    };

    const calculateHbA1CFactor = (coeffs: Record<string, number>): number => {
      if (hba1c === undefined) {
        return coeffs.C30; // Missing HbA1c
      }
      if (diabetes) {
        return (hba1c - 5.3) * coeffs.C28; // Diabetes present
      } else {
        return (hba1c - 5.3) * coeffs.C29; // Diabetes not present
      }
    };

    const calculateEndpointRisk = (coeffs: Record<string, number>): number => {
      // Exact PREVENT formula implementation
      
      // Age transformation (centered at 55, per 10 years)
      const ageNorm = (age - 55) / 10;
      const ageSquared = ageNorm * ageNorm; // For 30-year models only
      
      // Cholesterol transformations - CRITICAL: Use mg/dL with 0.02586 conversion as specified
      const nonHdlCholTransformed = (totalChol - hdlChol) * 0.02586 - 3.5;
      const hdlCholTransformed = (hdlChol * 0.02586 - 1.3) / 0.3;
      
      // Blood pressure transformations (piecewise linear splines)
      const sbpLt110 = (Math.min(systolicBP, 110) - 110) / 20;
      const sbpGte110 = (Math.max(systolicBP, 110) - 130) / 20;
      
      // BMI transformations (piecewise linear splines)
      const bmiLt30 = (Math.min(bmi, 30) - 25) / 5;
      const bmiGte30 = (Math.max(bmi, 30) - 30) / 5;
      
      // eGFR transformations (piecewise linear splines)
      const egfrLt60 = (Math.min(eGFR, 60) - 60) / (-15);
      const egfrGte60 = (Math.max(eGFR, 60) - 90) / (-15);

      // Binary variables
      const diabetesVal = diabetes ? 1 : 0;
      const smokingVal = currentSmoker ? 1 : 0;
      const bpTxVal = onHypertensionMeds ? 1 : 0;
      const statinVal = onStatin ? 1 : 0;

      // Interaction terms
      const bpTxSbpGte110 = bpTxVal * sbpGte110;
      const statinNonHdlC = statinVal * nonHdlCholTransformed;
      const ageNonHdlC = ageNorm * nonHdlCholTransformed;
      const ageHdlC = ageNorm * hdlCholTransformed;
      const ageSbpGte110 = ageNorm * sbpGte110;
      const ageDm = ageNorm * diabetesVal;
      const ageSmoking = ageNorm * smokingVal;
      const ageBmiGte30 = ageNorm * bmiGte30;
      const ageEgfrLt60 = ageNorm * egfrLt60;

      // Core logit calculation using exact PREVENT formula
      let logit = coeffs.C0 * ageNorm +
                  coeffs.C1 * ageSquared +
                  coeffs.C2 * nonHdlCholTransformed +
                  coeffs.C3 * hdlCholTransformed +
                  coeffs.C4 * sbpLt110 +
                  coeffs.C5 * sbpGte110 +
                  coeffs.C6 * diabetesVal +
                  coeffs.C7 * smokingVal +
                  coeffs.C8 * bmiLt30 +
                  coeffs.C9 * bmiGte30 +
                  coeffs.C10 * egfrLt60 +
                  coeffs.C11 * egfrGte60 +
                  coeffs.C12 * bpTxVal +
                  coeffs.C13 * statinVal +
                  coeffs.C14 * bpTxSbpGte110 +
                  coeffs.C15 * statinNonHdlC +
                  coeffs.C16 * ageNonHdlC +
                  coeffs.C17 * ageHdlC +
                  coeffs.C18 * ageSbpGte110 +
                  coeffs.C19 * ageDm +
                  coeffs.C20 * ageSmoking +
                  coeffs.C21 * bmiGte30 +
                  coeffs.C22 * ageEgfrLt60;

      // Add enhanced factors ONLY when available and appropriate for this model type
      if (modelType !== 'BASE') {
        // UACR factor - only if uacr was provided
        if (hasUACR) {
        logit += calculateUACRFactor(coeffs);
        } else if (coeffs.C27 !== undefined) {
          // Add missing UACR penalty if coefficient exists
          logit += coeffs.C27;
        }
        
        // HbA1c factor - only if hba1c was provided
        if (hasHbA1c) {
        logit += calculateHbA1CFactor(coeffs);
        } else if (coeffs.C30 !== undefined) {
          // Add missing HbA1c penalty if coefficient exists
          logit += coeffs.C30;
        }
      }

      // Add intercept
      logit += coeffs.C31;

      // Convert to probability using exact PREVENT formula
      const expLogit = Math.exp(logit);
      return (100 * expLogit) / (1 + expLogit);
    };

    // Select appropriate coefficient sets based on sex and model type
    const isMale = sex === 'male';
    const genderPrefix: Gender = isMale ? 'MALE' : 'FEMALE';
    
    const getCoefficients = (endpoint: Endpoint, timeframe: Timeframe): CoefficientSet => {
      const coeffKey = `${modelType}_${timeframe}_${genderPrefix}_${endpoint}`;
      const fallbackKey = `BASE_${timeframe}_${genderPrefix}_${endpoint}`;
      
      return PREVENT_COEFFICIENTS[coeffKey] || PREVENT_COEFFICIENTS[fallbackKey];
    };

    // Calculate 10-year risks
    const totalCVD10 = calculateEndpointRisk(getCoefficients('TOTAL_CVD', '10'));
    const ascvd10 = calculateEndpointRisk(getCoefficients('ASCVD', '10')); // Use ASCVD coefficients
    const heartFailure10 = calculateEndpointRisk(getCoefficients('HF', '10'));

    let totalCVD30: number | undefined;
    let ascvd30: number | undefined;
    let heartFailure30: number | undefined;

    // Calculate 30-year risks only for ages 30-59
    if (age >= 30 && age <= 59) {
      totalCVD30 = calculateEndpointRisk(getCoefficients('TOTAL_CVD', '30'));
      ascvd30 = calculateEndpointRisk(getCoefficients('ASCVD', '30')); // Use ASCVD coefficients
      heartFailure30 = calculateEndpointRisk(getCoefficients('HF', '30'));
    }

    const tenYearTotalCVDRounded = Math.round(totalCVD10 * 10) / 10;
    
    const riskCategory: 'low' | 'borderline' | 'intermediate' | 'high' = 
      tenYearTotalCVDRounded < 5 ? 'low' : 
      tenYearTotalCVDRounded < 7.5 ? 'borderline' :
      tenYearTotalCVDRounded < 20 ? 'intermediate' : 'high';
      
    const recommendations = [
      'Discuss lifestyle modifications with your healthcare provider',
      'Regular follow-up based on risk level',
      'Consider additional cardiovascular protective measures'
    ];

    return {
      bmi: Math.round(bmi * 10) / 10,
      eGFR: Math.round(eGFR * 10) / 10,
      sdiGroup,
      hasEnhancedCKM: novelFactorCount > 0,
      tenYearRisk: {
        totalCVD: tenYearTotalCVDRounded,
        ascvd: Math.round(ascvd10 * 10) / 10,
        heartFailure: Math.round(heartFailure10 * 10) / 10
      },
      thirtyYearRisk: (age >= 30 && age <= 59) ? {
        totalCVD: Math.round(totalCVD30! * 10) / 10,
        ascvd: Math.round(ascvd30! * 10) / 10,
        heartFailure: Math.round(heartFailure30! * 10) / 10
      } : undefined,
      riskCategory,
      recommendations
    };
  };

  const handleCalculate = () => {
    if (!validateForm()) return;
    
    setIsCalculating(true);
    
    // Simulate advanced PREVENT risk calculation with loading animation
    setTimeout(() => {
      const calculatedResult = calculatePREVENTRisk();
      setResults(calculatedResult);
      setShowResults(true);
      setIsCalculating(false);
    }, 2200);
  };

  const handleReset = () => {
    setFormData({
      age: '',
      sex: '',
      height: '',
      weight: '',
      totalCholesterol: '',
      hdlCholesterol: '',
      systolicBP: '',
      serumCreatinine: '',
      onHypertensionMeds: false,
      onStatin: false,
      diabetes: false,
      currentSmoker: false,
      hba1c: '',
      uacr: '',
    });
    setResults(null);
    setShowResults(false);
    setErrors({});
    setIsCalculating(false);
    setCurrentStep(1);
    setCompletedSteps(new Set());
  };

  return (
    <div style={{ transform: 'scale(0.85)', transformOrigin: 'top' }}>
      <CalculatorContainer
        title={t('calculators.cardiology.prevent.title')}
        subtitle={t('calculators.cardiology.prevent.subtitle')}
        icon={Star}
        gradient="cardiology"
        className="max-w-7xl mx-auto"
      >
      <div className="space-y-8">
        {/* PREVENT Alert */}
        <div className="bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 border-2 border-purple-200 dark:border-purple-800 rounded-2xl p-6">
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-purple-100 dark:bg-purple-900/30 rounded-xl">
              <Brain className="w-6 h-6 text-purple-600 dark:text-purple-400" />
            </div>
            <div className="flex-1">
              <h4 className="text-lg font-bold text-purple-800 dark:text-purple-200 mb-2">{t('calculators.cardiology.prevent.alert_title')}</h4>
              <p className="text-purple-700 dark:text-purple-300 leading-relaxed">
                {t('calculators.cardiology.prevent.alert_description')}
              </p>
              <div className="mt-3 inline-flex items-center space-x-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg px-3 py-1">
                <Star className="w-4 h-4 text-purple-600 dark:text-purple-400" />
                <span className="text-xs font-semibold text-purple-700 dark:text-purple-300">{t('calculators.cardiology.prevent.alert_badge')}</span>
              </div>
            </div>
          </div>
        </div>

        {!showResults ? (
          <>
            {/* Sophisticated Step Navigation System */}
            <div className="relative mb-24">
              <div className="flex items-center justify-between flex-wrap">
                {/* The connecting line */}
                <div className="absolute top-8 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700" style={{ zIndex: 1 }}></div>
                <div 
                  className="absolute top-8 left-0 h-1 bg-gradient-to-r from-cyan-400 to-purple-500 transition-all duration-1000 ease-out" 
                  style={{ 
                    width: `${((completedSteps.size > 0 ? completedSteps.size -1 : 0) / 4) * 100}%`,
                    zIndex: 2 
                  }}
                ></div>

                {STEP_CONFIG.map((step, index) => {
                  const isActive = currentStep === step.id;
                  const isCompleted = completedSteps.has(step.id);
                  const isFuture = currentStep < step.id;

                  return (
                    <div 
                      key={step.id} 
                      className="relative flex flex-col items-center text-center group"
                      style={{ zIndex: 10 }}
                    >
                      <div 
                        className={`relative w-16 h-16 flex items-center justify-center rounded-full transition-all duration-500 transform cursor-pointer ${isActive ? 'scale-110' : 'group-hover:scale-100'}`}
                        onClick={() => !isFuture && setCurrentStep(step.id)}
                      >
                        {/* Glowing effect for active step */}
                        {isActive && (
                          <div className={`absolute -inset-2 rounded-full bg-gradient-to-r ${step.color} opacity-30 blur-xl animate-pulse`}></div>
                        )}
                        
                        {/* Step Circle */}
                        <div className={`
                          w-full h-full rounded-full flex items-center justify-center font-bold text-2xl transition-all duration-500 shadow-lg
                          ${isCompleted ? `bg-gradient-to-br ${step.color} text-white` : 
                            isActive ? `bg-gradient-to-br ${step.color} text-white` : 
                            `bg-gradient-to-br ${step.color} opacity-60 text-white`}
                          ${isActive ? `shadow-2xl ring-4 ring-offset-4 ring-offset-white dark:ring-offset-gray-900 ring-purple-500` : ''}
                        `}>
                          {isCompleted && !isActive ? (
                            <CheckCircle className="w-8 h-8 text-white" />
                          ) : (
                            <step.icon className="w-8 h-8 text-white" />
                          )}
                        </div>
                      </div>
                      
                      {/* Step Label */}
                      <div className={`mt-5 w-32 transition-opacity duration-500 ${isActive ? 'opacity-100' : 'opacity-70 group-hover:opacity-100'}`}>
                        <div className={`font-bold transition-colors duration-300 ${isActive ? `text-transparent bg-clip-text bg-gradient-to-r ${step.color}` : 'text-gray-800 dark:text-gray-200'}`}>
                          {step.title}
                        </div>
                        <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {step.description}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Progress Percentage with Animation */}
            <div className="text-center mb-8">
              <div className="inline-flex items-center justify-center flex-wrap gap-2 space-x-4 px-8 py-4 bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl rounded-3xl border border-white/20 dark:border-gray-700/20 shadow-2xl max-w-full">
                <div className="relative">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center">
                    <Target className="w-6 h-6 text-white" />
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                    {Math.round((completedSteps.size / 4) * 100)}%
                  </span>
                  <span className="text-lg font-semibold text-gray-700 dark:text-gray-300">
                    {t('calculators.cardiology.prevent.progress_complete')}
                  </span>
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  {completedSteps.size} {t('calculators.cardiology.prevent.progress_of_steps')}
                </div>
              </div>
            </div>

            {/* Real-time Calculations Preview */}
            {(realTimeCalculations.bmi > 0 || realTimeCalculations.eGFR > 0) && (
              <div className="mb-8 p-8 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-blue-900/20 dark:via-indigo-900/20 dark:to-purple-900/20 rounded-3xl border border-blue-200 dark:border-blue-800 backdrop-blur-sm shadow-xl">
                <div className="text-center mb-6">
                  <h4 className="text-lg font-bold text-gray-800 dark:text-gray-200 mb-2">Live Calculations</h4>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Values update automatically as you enter data</p>
                </div>
                <div className="flex items-center justify-center space-x-12">
                  {realTimeCalculations.bmi > 0 && (
                    <div className="text-center group">
                      <div className="relative">
                        <div className="flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/40 dark:to-blue-800/40 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300 shadow-lg">
                          <Activity className="w-10 h-10 text-blue-600 dark:text-blue-400" />
                        </div>
                        <div className="absolute inset-0 rounded-full bg-blue-500 opacity-20 blur-xl scale-125 group-hover:scale-150 transition-transform duration-300"></div>
                      </div>
                      <div className="text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2">
                        {realTimeCalculations.bmi}
                      </div>
                      <div className="text-sm font-medium text-gray-600 dark:text-gray-400">BMI (kg/m²)</div>
                      <div className="text-xs text-gray-500 dark:text-gray-500 mt-1">
                        {realTimeCalculations.bmi < 18.5 ? 'Underweight' :
                         realTimeCalculations.bmi < 25 ? 'Normal' :
                         realTimeCalculations.bmi < 30 ? 'Overweight' : 'Obese'}
                      </div>
                    </div>
                  )}
                  {realTimeCalculations.eGFR > 0 && (
                    <div className="text-center group">
                      <div className="relative">
                        <div className="flex items-center justify-center w-20 h-20 bg-gradient-to-br from-emerald-100 to-emerald-200 dark:from-emerald-900/40 dark:to-emerald-800/40 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300 shadow-lg">
                          <Heart className="w-10 h-10 text-emerald-600 dark:text-emerald-400" />
                        </div>
                        <div className="absolute inset-0 rounded-full bg-emerald-500 opacity-20 blur-xl scale-125 group-hover:scale-150 transition-transform duration-300"></div>
                      </div>
                      <div className="text-3xl font-bold text-emerald-600 dark:text-emerald-400 mb-2">
                        {realTimeCalculations.eGFR}
                      </div>
                      <div className="text-sm font-medium text-gray-600 dark:text-gray-400">eGFR (mL/min/1.73m²)</div>
                      <div className="text-xs text-gray-500 dark:text-gray-500 mt-1">
                        {realTimeCalculations.eGFR >= 90 ? 'Normal' :
                         realTimeCalculations.eGFR >= 60 ? 'Mild decrease' :
                         realTimeCalculations.eGFR >= 30 ? 'Moderate decrease' : 'Severe decrease'}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Step 1: Demographics */}
            {currentStep === 1 && (
              <div className="space-y-6 animate-fadeIn">
                <div className="text-center mb-8">
                  <div className="inline-flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 rounded-2xl border border-purple-200 dark:border-purple-800">
                    <User className="w-6 h-6 text-purple-600 dark:text-purple-400" />
                    <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.demographics_title')}</h3>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">{t('calculators.cardiology.prevent.demographics_description')}</p>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6">
                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.age_label')}
                    value={formData.age}
                    onChange={(value) => setFormData({ ...formData, age: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.age_placeholder')}
                    min={30}
                    max={79}
                    unit={t('calculators.cardiology.prevent.unit_years')}
                    error={errors.age}
                    icon={User}
                  />

                  <CalculatorSelect
                    label={t('calculators.cardiology.prevent.sex_label')}
                    value={formData.sex}
                    onChange={(value) => setFormData({ ...formData, sex: value as 'male' | 'female' })}
                    options={[
                      { value: '', label: t('calculators.cardiology.prevent.sex_placeholder') },
                      { value: 'male', label: t('calculators.cardiology.prevent.sex_male') },
                      { value: 'female', label: t('calculators.cardiology.prevent.sex_female') },
                    ]}
                    error={errors.sex}
                    icon={User}
                  />

                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.height_label')}
                    value={formData.height}
                    onChange={(value) => setFormData({ ...formData, height: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.height_placeholder')}
                    min={120}
                    max={220}
                    unit={t('calculators.cardiology.prevent.unit_cm')}
                    error={errors.height}
                    icon={User}
                  />
                </div>

                <div className="grid grid-cols-1 gap-4 sm:gap-6">
                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.weight_label')}
                    value={formData.weight}
                    onChange={(value) => setFormData({ ...formData, weight: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.weight_placeholder')}
                    min={30}
                    max={200}
                    unit={t('calculators.cardiology.prevent.unit_kg')}
                    error={errors.weight}
                    icon={User}
                  />
                </div>

                <div className="flex justify-end">
                  <CalculatorButton
                    onClick={() => setCurrentStep(2)}
                    className="enhanced-calculator-button"
                  >
                    {t('calculators.cardiology.prevent.next_clinical_factors')}
                  </CalculatorButton>
                </div>
              </div>
            )}

            {/* Step 2: Laboratory Values */}
            {currentStep === 2 && (
              <div className="space-y-6 animate-fadeIn">
                <div className="text-center mb-8">
                  <div className="inline-flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-emerald-50 to-teal-50 dark:from-emerald-900/20 dark:to-teal-900/20 rounded-2xl border border-emerald-200 dark:border-teal-800">
                    <BarChart3 className="w-6 h-6 text-emerald-600 dark:text-emerald-400" />
                    <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.lab_title')}</h3>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">{t('calculators.cardiology.prevent.lab_description')}</p>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6">
                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.total_cholesterol_label')}
                    value={formData.totalCholesterol}
                    onChange={(value) => setFormData({ ...formData, totalCholesterol: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.total_cholesterol_placeholder')}
                    min={100}
                    max={400}
                    unit={t('calculators.cardiology.prevent.unit_mg_dl')}
                    error={errors.totalCholesterol}
                    icon={BarChart3}
                  />

                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.hdl_cholesterol_label')}
                    value={formData.hdlCholesterol}
                    onChange={(value) => setFormData({ ...formData, hdlCholesterol: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.hdl_cholesterol_placeholder')}
                    min={20}
                    max={100}
                    unit={t('calculators.cardiology.prevent.unit_mg_dl')}
                    error={errors.hdlCholesterol}
                    icon={BarChart3}
                  />

                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.hba1c_label')}
                    value={formData.hba1c}
                    onChange={(value) => setFormData({ ...formData, hba1c: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.hba1c_placeholder')}
                    min={0}
                    max={10}
                    unit={t('calculators.cardiology.prevent.unit_percent')}
                    icon={BarChart3}
                  />
                </div>

                <div className="flex justify-between">
                  <CalculatorButton
                    onClick={() => setCurrentStep(1)}
                    variant="outline"
                  >
                    {t('calculators.cardiology.prevent.back_button')}
                  </CalculatorButton>
                  <CalculatorButton
                    onClick={() => setCurrentStep(3)}
                    className="enhanced-calculator-button"
                  >
                    {t('calculators.cardiology.prevent.next_clinical_factors')}
                  </CalculatorButton>
                </div>
              </div>
            )}

            {/* Step 3: Clinical Factors */}
            {currentStep === 3 && (
              <div className="space-y-6 animate-fadeIn">
                <div className="text-center mb-8">
                  <div className="inline-flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-purple-500 to-indigo-500 dark:from-purple-900/20 dark:to-indigo-900/20 rounded-2xl border border-purple-200 dark:border-purple-800">
                    <Stethoscope className="w-6 h-6 text-purple-600 dark:text-purple-400" />
                    <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.clinical_title')}</h3>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">{t('calculators.cardiology.prevent.clinical_description')}</p>
                </div>

                <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6">
                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.systolic_bp_label')}
                    value={formData.systolicBP}
                    onChange={(value) => setFormData({ ...formData, systolicBP: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.systolic_bp_placeholder')}
                    min={90}
                    max={200}
                    unit={t('calculators.cardiology.prevent.unit_mmhg')}
                    error={errors.systolicBP}
                    icon={TrendingUp}
                  />

                  <CalculatorInput
                    label={t('calculators.cardiology.prevent.serum_creatinine_label')}
                    value={formData.serumCreatinine}
                    onChange={(value) => setFormData({ ...formData, serumCreatinine: value })}
                    type="number"
                    step={0.1}
                    placeholder={t('calculators.cardiology.prevent.serum_creatinine_placeholder')}
                    min={0.5}
                    max={5.0}
                    unit={t('calculators.cardiology.prevent.unit_mg_dl')}
                    error={errors.serumCreatinine}
                    icon={BarChart3}
                  />
                </div>

                {/* Clinical Risk Factors */}
                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-900 dark:text-gray-100 flex items-center space-x-2">
                    <Stethoscope className="w-5 h-5 text-purple-600" />
                    <span>{t('calculators.cardiology.prevent.clinical_risk_factors_title')}</span>
                  </h4>
                  <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                    <CalculatorCheckbox
                      label={t('calculators.cardiology.prevent.on_hypertension_meds_label')}
                      checked={formData.onHypertensionMeds}
                      onChange={(checked) => setFormData({ ...formData, onHypertensionMeds: checked })}
                      description={t('calculators.cardiology.prevent.on_hypertension_meds_description')}
                      icon={Activity}
                    />

                    <CalculatorCheckbox
                      label={t('calculators.cardiology.prevent.on_statin_label')}
                      checked={formData.onStatin}
                      onChange={(checked) => setFormData({ ...formData, onStatin: checked })}
                      description={t('calculators.cardiology.prevent.on_statin_description')}
                      icon={BarChart3}
                    />

                    <CalculatorCheckbox
                      label={t('calculators.cardiology.prevent.diabetes_label')}
                      checked={formData.diabetes}
                      onChange={(checked) => setFormData({ ...formData, diabetes: checked })}
                      description={t('calculators.cardiology.prevent.diabetes_description')}
                      icon={BarChart3}
                    />

                    <CalculatorCheckbox
                      label={t('calculators.cardiology.prevent.current_smoker_label')}
                      checked={formData.currentSmoker}
                      onChange={(checked) => setFormData({ ...formData, currentSmoker: checked })}
                      description={t('calculators.cardiology.prevent.current_smoker_description')}
                      icon={AlertCircle}
                    />
                  </div>
                </div>

                <div className="flex justify-between">
                  <CalculatorButton
                    onClick={() => setCurrentStep(2)}
                    variant="outline"
                  >
                    {t('calculators.cardiology.prevent.back_button')}
                  </CalculatorButton>
                  <CalculatorButton
                    onClick={() => setCurrentStep(4)}
                    className="enhanced-calculator-button"
                  >
                    {t('calculators.cardiology.prevent.next_ckm_e_factors')}
                  </CalculatorButton>
                </div>
              </div>
            )}

            {/* Step 4: CKM-E Enhanced Factors */}
            {currentStep === 4 && (
              <div className="space-y-6 animate-fadeIn">
                <div className="text-center mb-8">
                  <div className="inline-flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-2xl border border-blue-200 dark:border-blue-800">
                    <Star className="w-6 h-6 text-blue-600 dark:text-blue-400" />
                    <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.ckm_e_title')}</h3>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">{t('calculators.cardiology.prevent.ckm_e_description')}</p>
                </div>

                <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6">
                  <CalculatorInput
                    label={`${t('calculators.cardiology.prevent.uacr_label')} (Optional)`}
                    value={formData.uacr}
                    onChange={(value) => setFormData({ ...formData, uacr: value })}
                    type="number"
                    placeholder={t('calculators.cardiology.prevent.uacr_placeholder')}
                    min={0}
                    max={1000}
                    unit={t('calculators.cardiology.prevent.unit_mg_g')}
                    icon={BarChart3}
                  />
                </div>

                <div className="flex justify-between">
                  <CalculatorButton
                    onClick={() => setCurrentStep(3)}
                    variant="outline"
                  >
                    {t('calculators.cardiology.prevent.back_button')}
                  </CalculatorButton>
                  <CalculatorButton
                    onClick={handleCalculate}
                    loading={isCalculating}
                    icon={Calculator}
                    size="lg"
                    className="enhanced-calculator-button"
                  >
                    {t('calculators.cardiology.prevent.calculate_prevent_risk')}
                  </CalculatorButton>
                </div>
              </div>
            )}
          </>
        ) : (
          /* Results Display */
          results && (
            <div className="space-y-8 animate-scaleIn">
              <div className="bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 rounded-2xl p-6">
                <div className="flex items-center space-x-3 mb-6">
                  <Star className="w-6 h-6 text-purple-600 dark:text-purple-400" />
                  <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.results_title')}</h3>
                  {results.hasEnhancedCKM && (
                    <span className="px-3 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 rounded-full text-sm font-medium">
                      CKM-Enhanced
                    </span>
                  )}
                </div>
                {/* Calculated Values Display */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-3 mb-4">
                    <BarChart3 className="w-5 h-5 text-purple-500" />
                    <h4 className="font-semibold text-gray-900 dark:text-gray-100">Calculated Values</h4>
                  </div>
                  <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                    <div className="p-4 bg-white/50 dark:bg-gray-800/50 rounded-2xl border border-white/20 dark:border-gray-700/20">
                      <div className="text-center">
                        <div className="text-xl font-bold text-blue-600 dark:text-blue-400 mb-1">{results.bmi}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">BMI (kg/m²)</div>
                      </div>
                    </div>
                    <div className="p-4 bg-white/50 dark:bg-gray-800/50 rounded-2xl border border-white/20 dark:border-gray-700/20">
                      <div className="text-center">
                        <div className="text-xl font-bold text-green-600 dark:text-green-400 mb-1">{results.eGFR}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">eGFR (mL/min/1.73m²)</div>
                      </div>
                    </div>
                    {results.sdiGroup && (
                      <div className="p-4 bg-white/50 dark:bg-gray-800/50 rounded-2xl border border-white/20 dark:border-gray-700/20">
                        <div className="text-center">
                          <div className="text-xl font-bold text-orange-600 dark:text-orange-400 mb-1">{results.sdiGroup}</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">SDI Group</div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* 10-Year Risk Display */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-3 mb-4">
                    <Target className="w-5 h-5 text-indigo-500" />
                    <h4 className="font-semibold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.ten_year_predictions_title')}</h4>
                  </div>
                  <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                    <div className="p-4 bg-white/50 dark:bg-gray-800/50 rounded-2xl border border-white/20 dark:border-gray-700/20">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400 mb-1">{results.tenYearRisk.totalCVD}%</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">{t('calculators.cardiology.prevent.total_cvd')}</div>
                        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                          <div 
                            className="bg-purple-500 h-2 rounded-full transition-all duration-1000"
                            style={{ width: `${Math.min(results.tenYearRisk.totalCVD * 2, 100)}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                    <div className="p-4 bg-white/50 dark:bg-gray-800/50 rounded-2xl border border-white/20 dark:border-gray-700/20">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-indigo-600 dark:text-indigo-400 mb-1">{results.tenYearRisk.ascvd}%</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">{t('calculators.cardiology.prevent.ascvd')}</div>
                        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                          <div 
                            className="bg-indigo-500 h-2 rounded-full transition-all duration-1000"
                            style={{ width: `${Math.min(results.tenYearRisk.ascvd * 2, 100)}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                    <div className="p-4 bg-white/50 dark:bg-gray-800/50 rounded-2xl border border-white/20 dark:border-gray-700/20">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-pink-600 dark:text-pink-400 mb-1">{results.tenYearRisk.heartFailure}%</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">{t('calculators.cardiology.prevent.heart_failure')}</div>
                        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                          <div 
                            className="bg-pink-500 h-2 rounded-full transition-all duration-1000"
                            style={{ width: `${Math.min(results.tenYearRisk.heartFailure * 2, 100)}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 30-Year Risk Display (for ages 30-59) */}
                {results.thirtyYearRisk && (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-3 mb-4">
                      <Clock className="w-5 h-5 text-blue-500" />
                      <h4 className="font-semibold text-gray-900 dark:text-gray-100">{t('calculators.cardiology.prevent.thirty_year_predictions_title')}</h4>
                    </div>
                    <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                      <div className="p-4 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-900/30 rounded-xl border border-purple-200 dark:border-purple-800">
                        <div className="text-center">
                          <div className="text-xl font-bold text-purple-700 dark:text-purple-300">{results.thirtyYearRisk.totalCVD}%</div>
                          <div className="text-sm text-purple-600 dark:text-purple-400">{t('calculators.cardiology.prevent.total_cvd')}</div>
                        </div>
                      </div>
                      <div className="p-4 bg-gradient-to-br from-indigo-50 to-indigo-100 dark:from-indigo-900/20 dark:to-indigo-900/30 rounded-xl border border-indigo-200 dark:border-indigo-800">
                        <div className="text-center">
                          <div className="text-xl font-bold text-indigo-700 dark:text-indigo-300">{results.thirtyYearRisk.ascvd}%</div>
                          <div className="text-sm text-indigo-600 dark:text-indigo-400">{t('calculators.cardiology.prevent.ascvd')}</div>
                        </div>
                      </div>
                      <div className="p-4 bg-gradient-to-br from-pink-50 to-pink-100 dark:from-pink-900/20 dark:to-pink-900/30 rounded-xl border border-pink-200 dark:border-pink-800">
                        <div className="text-center">
                          <div className="text-xl font-bold text-pink-700 dark:text-pink-300">{results.thirtyYearRisk.heartFailure}%</div>
                          <div className="text-sm text-pink-600 dark:text-pink-400">{t('calculators.cardiology.prevent.heart_failure')}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Enhanced Risk Visualization Charts */}
                {(formData.sex === 'male' || formData.sex === 'female') && (
                  <div className="space-y-8 mt-8">
                    {/* 10-Year Risk Chart */}
                    <RiskVisualizationChart
                      patientAge={parseInt(formData.age)}
                      sex={formData.sex as 'male' | 'female'}
                      formData={formData}
                      currentRisk={{
                        totalCVD: results.tenYearRisk.totalCVD,
                        ascvd: results.tenYearRisk.ascvd,
                        heartFailure: results.tenYearRisk.heartFailure
                      }}
                      timeframe="10"
                    />

                    {/* 30-Year Risk Chart (if applicable) */}
                    {results.thirtyYearRisk && (
                      <RiskVisualizationChart
                        patientAge={parseInt(formData.age)}
                        sex={formData.sex as 'male' | 'female'}
                        formData={formData}
                        currentRisk={{
                          totalCVD: results.thirtyYearRisk.totalCVD,
                          ascvd: results.thirtyYearRisk.ascvd,
                          heartFailure: results.thirtyYearRisk.heartFailure
                        }}
                        timeframe="30"
                      />
                    )}
                  </div>
                )}

                {/* Algorithm Information */}
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <Award className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                    <h4 className="font-semibold text-blue-800 dark:text-blue-200">{t('calculators.cardiology.prevent.algorithm_2023_title')}</h4>
                  </div>
                  <div className="text-sm text-blue-700 dark:text-blue-300 space-y-2">
                    <p>This calculator implements the official American Heart Association PREVENT™ equations (2023):</p>
                    <ul className="space-y-3 text-sm text-gray-700 dark:text-gray-300">
                  <li className="flex items-start space-x-3">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-1 flex-shrink-0" />
                    <span>{t('calculators.cardiology.prevent.algorithm_2023_feature_1')}</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-1 flex-shrink-0" />
                    <span>{t('calculators.cardiology.prevent.algorithm_2023_feature_2')}</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-1 flex-shrink-0" />
                    <span>{t('calculators.cardiology.prevent.algorithm_2023_feature_3')}</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-1 flex-shrink-0" />
                    <span>{t('calculators.cardiology.prevent.algorithm_2023_feature_4')}</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-1 flex-shrink-0" />
                    <span>{t('calculators.cardiology.prevent.algorithm_2023_feature_5')}</span>
                  </li>
                </ul>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row items-center justify-center gap-4">
                <CalculatorButton
                  onClick={handleReset}
                  variant="outline"
                  size="lg"
                  icon={Calculator}
                >
                  {t('calculators.cardiology.prevent.new_assessment')}
                </CalculatorButton>
                <CalculatorButton
                  onClick={() => setShowResults(false)}
                  variant="secondary"
                  size="lg"
                >
                  {t('calculators.cardiology.prevent.modify_inputs')}
                </CalculatorButton>
              </div>
            </div>
          )
        )}

        {/* Footer Information */}
        <div className="text-center pt-8 border-t border-white/20 dark:border-gray-800/20">
          <div className="flex items-center justify-center space-x-3 text-sm text-gray-600 dark:text-gray-400">
            <Info className="w-4 h-4" />
            <span>{t('calculators.cardiology.prevent.footer_description')}</span>
            <div className="flex items-center space-x-1">
              <Star className="w-4 h-4 text-purple-600" />
              <span className="text-purple-600 font-semibold">{t('calculators.cardiology.prevent.footer_guidelines')}</span>
            </div>
          </div>
        </div>
      </div>
    </CalculatorContainer>
    </div>
  );
};

export { PREVENTCalculator }; 