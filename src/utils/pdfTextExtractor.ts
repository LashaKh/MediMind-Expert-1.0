import * as pdfjsLib from 'pdfjs-dist';
import { extractTextWithGeminiVision, assessGeorgianTextQuality } from './geminiVisionExtractor';

// Configure PDF.js worker with LOCAL-FIRST strategy (no external dependencies)
if (typeof window !== 'undefined') {
  let workerConfigured = false;
  
  // Strategy 1: PRIORITIZE LOCAL FILE (eliminates CORS issues)
  try {
    // Add timestamp to force cache refresh
    const timestamp = Date.now();
    const localWorkerUrl = new URL(`/pdf.worker.min.js?v=${timestamp}`, window.location.origin).href;
    pdfjsLib.GlobalWorkerOptions.workerSrc = localWorkerUrl;
    pdfjsLib.GlobalWorkerOptions.disableWorker = false;
    workerConfigured = true;
  } catch (localError) {

  }
  
  // Strategy 2: Only try CDN as backup if local completely fails
  if (!workerConfigured) {
    try {
      // Use a different CDN that doesn't have Cloudflare restrictions
      const cdnWorkerUrl = 'https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.worker.min.mjs';
      pdfjsLib.GlobalWorkerOptions.workerSrc = cdnWorkerUrl;
      pdfjsLib.GlobalWorkerOptions.disableWorker = false;
      workerConfigured = true;
    } catch (cdnError) {

    }
  }
  
  // Strategy 3: Complete fallback - disable worker entirely (guaranteed to work)
  if (!workerConfigured) {
    console.warn('üêå All worker configurations failed, disabling worker (slower but bulletproof)');
    pdfjsLib.GlobalWorkerOptions.disableWorker = true;
    pdfjsLib.GlobalWorkerOptions.workerSrc = null;
  }
  
  // Enhanced security and performance settings
  pdfjsLib.GlobalWorkerOptions.isEvalSupported = false;  // Security: No eval()
  pdfjsLib.GlobalWorkerOptions.maxImageSize = 16777216;  // Performance: 16MB image limit
  pdfjsLib.GlobalWorkerOptions.cMapPacked = true;        // Performance: Use packed character maps
  
}

export interface ProgressInfo {
  stage: 'analyzing' | 'extracting' | 'ocr' | 'gemini' | 'complete';
  stageDescription: string;
  percentage?: number;
  estimatedTimeRemaining?: string;
  currentPage?: number;
  totalPages?: number;
  method?: 'standard' | 'ocr' | 'gemini';
}

export interface PdfTextExtractionResult {
  text: string;
  pageCount: number;
  hasText: boolean;
  needsOCR: boolean;
  extractionMethod?: 'standard' | 'gemini' | 'ocr';
  confidence?: number;
  error?: string;
}

// Georgian text encoding fixes
const sylfaenGeorgianMappings: Record<string, string> = {
  '·Éú': '·Éõ',
  '·É´': '·É®',
  '·Éü': '·Éù',
  '·Éô': '·Éò',
  '·É¢': '·É†',
  '·Éó': '·Éë',
  '·Éû': '·Éê',
  '·É≤': '·Éï',
  '·É≥': '·Éö',
  '·É¥': '·É°',
  '·Éµ': '·Éì',
  '·É¶': '·Éú',
  '·É∞': '·É£',
  '·É±': '·É§',
  '·É•': '·Éî',
  '·É¨': '·É¢',
  '·É†': '·Éó',
  '·É§': '·Éí',
  '·ÉÆ': '·É•',
  '·É∑': '·É™',
  '·É∏': '·É©',
  '·Éπ': '·ÉØ',
  '·É∫': '·ÉÆ',
  '·É∂': '·Éñ'
};

const specificWordMappings: Record<string, string> = {
  '·Éö·É•·Éù·Éó·Éû·É°·Éù·Éó·Éû·Éó': '·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°',
  '·É°·Éê·Éï·Éê·Éû·Éê·É°·Éì·Éù': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù',
  '·É¢·Éî·Éû·Éù·Éö·Éî·Éû·Éó·Éê': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',
  '·Éó·Éê·Éï·Éó·É°': '·Éó·Éê·Éï·Éò·É°',
  '·Éë·Éó·Éû·Éê·Éû·Éó·Éî·Éû·Éê·Éö·É°·Éû·Éó': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò',
  '·Éí·Éê·Éû·É•·Éî·Éö·Éù·É¨·Éî·Éû·Éó·Éö·Éù·Éë·Éê': '·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê',
  '·Éë·É°·Éô·Éö·Éó': '·Éë·É£·É©·É•·Éò',
  '·Éö·É°·Éë·Éú·Éê·Éó': '·Éõ·É£·É™·Éö·Éò·É°',
  '·Éì·Éó·Éê·Éö·Éî·Éû·É¢·Éó': '·Éì·Éò·Éê·Éõ·Éî·É¢·É†·Éò',
  '·Éë·Éó·Éë·Éê·Éû·Éó·Éê·Éö·É°·Éû·Éó': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò',
  '·Éó·É•·Éú·Éî·Éó': '·Éò·É•·Éú·Éî·Éë·Éò'
};

function hasSylfaenGeorgianPatterns(text: string): boolean {
  const patterns = [
    /·Éö·É•·Éù·Éó·Éû·É°·Éù·Éó·Éû·Éó/g,
    /·É°·Éê·Éï·Éê·Éû·Éê·É°·Éì·Éù/g,
    /·É¢·Éî·Éû·Éù·Éö·Éî·Éû·Éó·Éê/g,
    /·Éë·Éó·Éû·Éê·Éû·Éó·Éî·Éû·Éê·Éö·É°·Éû·Éó/g,
    /·Éí·Éê·Éû·É•·Éî·Éö·Éù·É¨·Éî·Éû·Éó·Éö·Éù·Éë·Éê/g,
    /√å√ò√è√Å√â√Ä√í√è√Å√â√ì/g,
    /√ì√Ä√ù√Ä√í√è/g,
    /√î√Ñ√î√è√å√Ñ√î√í√â√Ä/g,
    /[√§√∂√º√Ñ√ñ√ú]/g,
    /[√Ä-√ø]{3,}/g,
    /[·Éê-·É∞][√Ä-√ø]/g
  ];
  
  return patterns.some(pattern => pattern.test(text));
}

function fixGeorgianEncoding(text: string): string {
  if (!hasSylfaenGeorgianPatterns(text)) {
    return text;
  }

  let fixedText = text;

  // Apply word mappings first
  for (const [incorrect, correct] of Object.entries(specificWordMappings)) {
    fixedText = fixedText.replace(new RegExp(incorrect, 'g'), correct);
  }

  // Apply character mappings
  for (const [from, to] of Object.entries(sylfaenGeorgianMappings)) {
    fixedText = fixedText.replace(new RegExp(from, 'g'), to);
  }

  // Fix Latin Extended characters
  const latinExtendedToGeorgian: Record<string, string> = {
    '√Ä': '·Éê', '√Å': '·Éë', '√Ç': '·Éí', '√É': '·Éì', '√Ñ': '·Éî', '√Ö': '·Éï',
    '√Ü': '·Éñ', '√á': '·Éó', '√à': '·Éò', '√â': '·Éô', '√ä': '·Éö', '√ã': '·Éõ',
    '√å': '·Éú', '√ç': '·Éù', '√é': '·Éû', '√è': '·Éü', '√ê': '·É†', '√ë': '·É°',
    '√í': '·É¢', '√ì': '·É£', '√î': '·É§', '√ï': '·É•', '√ñ': '·É¶', '√ó': '·Éß',
    '√ò': '·É®', '√ô': '·É©', '√ö': '·É™', '√õ': '·É´', '√ú': '·É¨', '√ù': '·É≠',
    '√û': '·ÉÆ', '√ü': '·ÉØ', '√†': '·É∞'
  };

  for (const [latin, georgian] of Object.entries(latinExtendedToGeorgian)) {
    fixedText = fixedText.replace(new RegExp(latin, 'g'), georgian);
  }

  return fixedText;
}

export async function extractTextFromPdf(
  file: File,
  onProgress?: (progress: ProgressInfo) => void
): Promise<PdfTextExtractionResult> {
  try {
    onProgress?.({
      stage: 'analyzing',
      stageDescription: 'Loading PDF document...',
      percentage: 0
    });

    const arrayBuffer = await file.arrayBuffer();
    
    // Load PDF with enhanced Unicode support and BULLETPROOF error handling
    let pdf;
    let attempts = 0;
    const maxAttempts = 3;
    
    while (attempts < maxAttempts) {
      try {
        attempts++;
        
        pdf = await pdfjsLib.getDocument({
          data: arrayBuffer,
          useSystemFonts: true,
          disableFontFace: false,
          fontExtraProperties: true,
          cMapPacked: true,
          disableRange: false,
          disableStream: false,
          disableAutoFetch: false,
          isOffscreenCanvasSupported: false
        }).promise;
        
        break; // Success - exit retry loop
        
      } catch (workerError) {

        if (attempts === 1) {
          // First failure: Disable worker and try again
          pdfjsLib.GlobalWorkerOptions.disableWorker = true;
          pdfjsLib.GlobalWorkerOptions.workerSrc = null;
        } else if (attempts === 2) {
          // Second failure: Use minimal configuration
        } else {
          // Final failure: Re-throw error

          throw new Error(`PDF loading failed after ${maxAttempts} attempts: ${workerError.message}`);
        }
      }
    }

    const numPages = pdf.numPages;
    let allText = '';
    let hasText = false;

    onProgress?.({
      stage: 'extracting',
      stageDescription: 'Extracting text from pages...',
      percentage: 10,
      totalPages: numPages,
      method: 'standard'
    });

    // Extract text from each page
    for (let pageNum = 1; pageNum <= numPages; pageNum++) {
      const page = await pdf.getPage(pageNum);
      const textContent = await page.getTextContent();
      
      // Extract text from items
      const pageText = textContent.items
        .map((item) => (item as { str: string }).str)
        .join(' ')
        .trim();

      if (pageText.length > 0) {
        hasText = true;
        allText += `\n--- Page ${pageNum} ---\n${pageText}\n`;
      }

      // Check for text operators even if no text extracted
      if (!hasText) {
        const operators = await page.getOperatorList();
        const hasTextOperators = operators.fnArray.some((fn: number) => 
          [pdfjsLib.OPS.showText, pdfjsLib.OPS.showSpacedText, pdfjsLib.OPS.nextLineShowText].includes(fn)
        );
        if (hasTextOperators) {
          hasText = true;
        }
      }

      const progress = 10 + (pageNum / numPages) * 80;
      onProgress?.({
        stage: 'extracting',
        stageDescription: `Processing page ${pageNum} of ${numPages}...`,
        percentage: Math.round(progress),
        currentPage: pageNum,
        totalPages: numPages,
        method: 'standard'
      });
    }

    // Apply encoding fixes
    if (allText) {
      allText = fixGeorgianEncoding(allText);
    }

    // Assess text quality and determine if Gemini extraction is needed
    if (allText) {
      const qualityAssessment = assessGeorgianTextQuality(allText);
      
      // Debug logging for quality assessment
      if (process.env.NODE_ENV === 'development') {
        console.log('PDF quality assessment:', qualityAssessment);
      }
      
      // Use Gemini if text appears garbled or quality is poor
      if (qualityAssessment.shouldUseGemini) {
        onProgress?.({
          stage: 'gemini',
          stageDescription: 'Georgian text quality issues detected, using Gemini Vision API...',
          percentage: 50,
          method: 'gemini'
        });

        try {
          const geminiResult = await extractTextWithGeminiVision(file, (geminiProgress) => {
            // Forward Gemini progress with adjusted percentage
            onProgress?.({
              ...geminiProgress,
              percentage: 50 + (geminiProgress.percentage || 0) * 0.5
            });
          });

          if (geminiResult.text && geminiResult.text.trim().length > 0) {
            // For Georgian text, prioritize Gemini's clean extraction over garbled standard text
            // Even if it's shorter, clean Georgian text is much more valuable than garbled characters
            return {
              text: geminiResult.text,
              pageCount: numPages,
              hasText: true,
              needsOCR: false,
              extractionMethod: 'gemini',
              confidence: geminiResult.confidence
            };
          }
        } catch (geminiError) {

          // Continue with standard extraction
        }
      }
    }

    // If no text found with standard extraction, fall back to OCR (not Gemini)
    // Gemini should only be used for garbled Georgian text, not for missing text
    if (!hasText || !allText.trim()) {
      // Continue to OCR fallback - don't use Gemini for missing text
    }

    // Truncate to fit API token limits (approximately 25,000 tokens)
    const maxChars = 100000; // Roughly 25k tokens
    if (allText.length > maxChars) {
      allText = allText.substring(0, maxChars) + '\n... (content truncated)';
    }

    onProgress?.({
      stage: 'complete',
      stageDescription: 'Text extraction complete',
      percentage: 100,
      method: 'standard'
    });

    return {
      text: allText || '',
      pageCount: numPages,
      hasText,
      needsOCR: !hasText,
      extractionMethod: 'standard',
      confidence: hasText ? 0.8 : 0
    };

  } catch (error) {

    return {
      text: '',
      pageCount: 0,
      hasText: false,
      needsOCR: true,
      extractionMethod: 'standard',
      confidence: 0,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}